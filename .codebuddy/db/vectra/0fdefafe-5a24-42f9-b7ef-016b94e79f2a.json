{"chunk":20,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"src/tests/cache-service.test.js","content":"/**\n(function() {\n   T.registerTest(\"CacheService\", \"get should return value from script cache on hit (memory miss)\", function() {\n     setupTestState();\n     let computeCount = 0;\n     const key = \"script_hit_key\";\n     const expectedValue = { id: 123, status: \"active\" };\n     const computeFunc = () => { computeCount++; return \"should not compute\"; };\n     const namespacedKey = `fp_${key}`;\n\n     // Pre-populate script cache\n     mockScriptCacheStore[namespacedKey] = { value: JSON.stringify(expectedValue), expiry: Date.now() + 10000 };\n     // Ensure memory cache is empty for this key\n     delete TestCacheService._getMemoryCache()[namespacedKey];\n\n     const result = TestCacheService.get(key, computeFunc);\n\n     T.assertEquals(0, computeCount, \"Compute function should not be called on script hit.\");\n     T.assertDeepEquals(expectedValue, result, \"Should return the value from script cache.\");\n      // Check memory cache was populated after script hit\n     T.assertNotNull(TestCacheService._getMemoryCache()[namespacedKey], \"Memory cache should be populated after script hit.\");\n     T.assertDeepEquals(expectedValue, TestCacheService._getMemoryCache()[namespacedKey].value, \"Memory cache should contain the value after script hit.\");\n  });"}