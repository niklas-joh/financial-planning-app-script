{"chunk":7,"numChunks":12,"fileHash":"ZXsq8xAaFrCbNSugDl1Kat4ED+IFFjJnDwd32mTxcoc=","filePath":"src/utils/common.js","content":"/**\nFinancialPlanner.Utils = (function() {\n  return {\n    /**\n     * Retrieves a sheet by its name within the given spreadsheet. If the sheet doesn't exist,\n     * it creates a new one with that name. If the sheet *does* exist, its content (but not formatting) is cleared.\n     * @param {GoogleAppsScript.Spreadsheet.Spreadsheet} spreadsheet - The spreadsheet object to operate on.\n     * @param {string} sheetName - The desired name of the sheet.\n     * @return {GoogleAppsScript.Spreadsheet.Sheet} The existing or newly created sheet object.\n     * @example\n     * const ss = SpreadsheetApp.getActiveSpreadsheet();\n     * const reportSheet = FinancialPlanner.Utils.getOrCreateSheet(ss, \"Monthly Report\");\n     */\n    getOrCreateSheet: function(spreadsheet, sheetName) {\n      let sheet;\n      try {\n        sheet = spreadsheet.getSheetByName(sheetName);\n        if (!sheet) {\n          sheet = spreadsheet.insertSheet(sheetName);\n        } else {\n          // Clear existing content but preserve formatting\n          sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns()).clearContent();\n        }\n      } catch (e) {\n        sheet = spreadsheet.insertSheet(sheetName);\n      }\n      return sheet;\n    },\n    /**\n     * Formats a given cell range as currency using a provided Google Sheets number format string.\n     * @param {GoogleAppsScript.Spreadsheet.Range} range - The cell range to format.\n     * @param {string} numberFormatString - The complete number format string to apply.\n     * @return {GoogleAppsScript.Spreadsheet.Range} The same range object, allowing for method chaining.\n     * @example\n     * const amountRange = sheet.getRange(\"C2:C10\");\n     * const formatStr = FinancialPlanner.Config.getLocale().NUMBER_FORMATS.CURRENCY_DEFAULT;\n     * FinancialPlanner.Utils.format"}