{"chunk":7,"numChunks":8,"fileHash":"TyImlfjY3LNlomYOmDP2vgD5cwfPST418dCF0ywcs8U=","filePath":"src/services/error-service.js","content":"/**\nconst ErrorServiceModule = (function() {\n  function logToConsole(error) {\n    console.error(`[${error.name || 'Error'}] ${error.message}`);\n    if (error.details) {\n      console.error('Details:', error.details);\n    }\n    if (error.stack) {\n      console.error('Stack trace:', error.stack);\n    }\n  }\n  /**\n   * Constructor for the ErrorServiceModule.\n   * @param {object} configInstance - An instance of ConfigModule.\n   * @param {object} uiServiceInstance - An instance of UIServiceModule.\n   * @constructor\n   */\n  function ErrorServiceModuleConstructor(configInstance, uiServiceInstance) {\n    this.config = configInstance;\n    this.uiService = uiServiceInstance; // Will be used by this.handle\n  }\n  ErrorServiceModuleConstructor.prototype.create = function(message, details = {}) {\n    return new FinancialPlannerError(message, details);\n  };\n  ErrorServiceModuleConstructor.prototype.log = function(error) {\n    logToConsole(error);\n    // Pass the config instance to logToSheet\n    logToSheet(error, this.config);\n  };\n  ErrorServiceModuleConstructor.prototype.handle = function(error, userFriendlyMessage) {\n    this.log(error);\n    // Ensure uiService is available (it will be once UIServiceModule is refactored and injected)\n    if (this.uiService && typeof this.uiService.showErrorNotification === 'function') {\n      this.uiService.showErrorNotification(\n        'Error',\n        userFriendlyMessage || error.message\n      );\n    } else {\n      console.error('UIService not available or showErrorNotification is not a function. Cannot show UI error.');\n      // Fallback to a simple toast if possible, or just rely on console/sheet log\n      SpreadsheetApp.getActiveSpreadsheet().toast(userFriendlyMessage || error.message, 'Error Occurred', 5);\n    }\n  };"}