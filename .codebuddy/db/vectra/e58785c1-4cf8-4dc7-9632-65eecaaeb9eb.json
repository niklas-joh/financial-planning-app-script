{"chunk":7,"numChunks":10,"fileHash":"qKty2YPjJfk9NdZZT+Kl8Aescdwa/V3Jg8MhLZ7cQWs=","filePath":"src/tests/ui-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"UIService\", \"showInfoAlert should call ui.alert with OK button\", function() {\n    resetMocks();\n    const title = \"Information\";\n    const message = \"This is an informational message.\";\n    UIService.showInfoAlert(title, message);\n    T.assertNotNull(lastAlert, \"ui.alert should have been called for info.\");\n    T.assertEquals(title, lastAlert.title, \"Info alert title should match.\");\n    T.assertEquals(message, lastAlert.message, \"Info alert message should match.\");\n    T.assertEquals(mockUi.ButtonSet.OK, lastAlert.buttons, \"Info alert should use OK button set.\");\n  });\n  T.registerTest(\"UIService\", \"showConfirmationDialog should call ui.alert with OK_CANCEL and return true on OK\", function() {\n    resetMocks();\n    alertResponse = mockUi.Button.OK; // Simulate user clicking OK\n    const title = \"Confirm Action\";\n    const message = \"Are you sure?\";\n    const result = UIService.showConfirmationDialog(title, message);\n    T.assertNotNull(lastAlert, \"ui.alert should have been called for confirmation.\");\n    T.assertEquals(title, lastAlert.title, \"Confirmation title should match.\");\n    T.assertEquals(message, lastAlert.message, \"Confirmation message should match.\");\n    T.assertEquals(mockUi.ButtonSet.OK_CANCEL, lastAlert.buttons, \"Confirmation should use OK_CANCEL button set.\");\n    T.assertTrue(result, \"Should return true when user clicks OK.\");\n  });\n  T.registerTest(\"UIService\", \"showConfirmationDialog should return false on Cancel\", function() {\n    resetMocks();\n    alertResponse = mockUi.Button.CANCEL; // Simulate user clicking Cancel\n    const result = UIService.showConfirmationDialog(\"Confirm\", \"Sure?\");\n    T.assertFalse(result, \"Should return false when user clicks Cancel.\");\n  });"}