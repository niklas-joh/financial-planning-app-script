{"chunk":8,"numChunks":11,"fileHash":"/PHrQyqA5cetRfWinyFGgGswyQob/Jj+6lGnFfyhiRY=","filePath":"cline/clasp-verify/src/core/settings-service.js","content":"/**\nFinancialPlanner.SettingsService = (function(config, utils, uiService, errorService) {\n  return {\n    setValue: function(key, value) {\n      try {\n        const sheet = getSettingsSheet();\n        const preference = findPreference(key);\n        \n        if (preference) {\n          sheet.getRange(preference.row, 2).setValue(value);\n        } else {\n          const lastRow = Math.max(1, sheet.getLastRow());\n          sheet.getRange(lastRow + 1, 1, 1, 2).setValues([[key, value]]);\n        }\n      } catch (error) {\n        errorService.handle(errorService.create(`Error setting setting value for key: ${key}`, { originalError: error.toString(), valueToSet: value }), `Failed to set setting: ${key}`);\n      }\n    },\n    /**\n     * Retrieves a preference value and coerces it to a boolean.\n     * Handles string \"true\"/\"false\" and numeric 1/0 as boolean.\n     * @param {string} key - The preference key.\n     * @param {boolean} [defaultValue=false] - The default boolean value if the key is not found or cannot be coerced.\n     * @return {boolean} The preference value as a boolean.\n     *\n     * @example\n     * const showTips = FinancialPlanner.SettingsService.getBooleanValue(\"ShowStartupTips\", true);\n     */\n    getBooleanValue: function(key, defaultValue) {\n      const value = this.getValue(key, defaultValue);\n      if (typeof value === 'boolean') return value;\n      if (value === 'true' || value === 1 || value === '1') return true;\n      if (value === 'false' || value === 0 || value === '0') return false;\n      return !!defaultValue; // Ensure defaultValue is also coerced if not boolean\n    },"}