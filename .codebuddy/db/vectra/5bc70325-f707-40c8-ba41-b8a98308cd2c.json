{"chunk":8,"numChunks":10,"fileHash":"YkAHVxQlD9SNvww7C5mYEgdVTfdlnDD9wi4+5rkOXLM=","filePath":"src/services/metrics-calculator.js","content":"/**\nconst MetricsCalculatorModule = (function() {\n  MetricsCalculatorModuleConstructor.prototype.validateMetrics = function(metrics) {\n    const errors = [];\n    const warnings = [];\n    \n    if (metrics.income < 0) {\n      errors.push('Income cannot be negative');\n    }\n    \n    if (metrics.savingsRate > 1) {\n      errors.push('Savings rate cannot exceed 100%');\n    }\n    \n    if (metrics.savingsRate < 0) {\n      warnings.push('Negative savings rate indicates deficit');\n    }\n    \n    const totalExpenseRate = Object.values(metrics.expenseRates || {})\n      .reduce((sum, rate) => sum + rate, 0);\n      \n    if (totalExpenseRate > 1) {\n      warnings.push('Total expense rate exceeds 100%');\n    }\n    \n    return {\n      valid: errors.length === 0,\n      errors: errors,\n      warnings: warnings\n    };\n  };\n  /**\n   * Formats currency value\n   * @param {number} value Value to format\n   * @param {Object} [options] Formatting options\n   * @returns {string} Formatted currency string\n   */\n  MetricsCalculatorModuleConstructor.prototype.formatCurrency = function(value, options = {}) {\n    const locale = this.config.getLocale();\n    const symbol = options.symbol || locale.CURRENCY_SYMBOL;\n    const decimals = options.decimals !== undefined ? options.decimals : 0;\n    \n    const formatted = Math.abs(value).toFixed(decimals);\n    const sign = value < 0 ? '-' : '';\n    \n    return `${sign}${symbol}${formatted}`;\n  };\n  /**\n   * Calculates running totals\n   * @param {Array} values Array of numeric values\n   * @returns {Array} Array of running totals\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateRunningTotals = function(values) {\n    let runningTotal = 0;\n    return values.map(value => {\n      runningTotal +="}