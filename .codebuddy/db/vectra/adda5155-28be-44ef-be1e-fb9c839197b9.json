{"chunk":9,"numChunks":12,"fileHash":"aZ9zuN1ddO09dA4aaZcQgsL67yVEiOBHXNLO6PzXnkg=","filePath":"cline/clasp-verify/src/utils/common.js","content":"/**\nFinancialPlanner.Utils = (function() {\n  return {\n    /**\n     * Formats a given cell range as a percentage with a specified number of decimal places.\n     * @param {GoogleAppsScript.Spreadsheet.Range} range - The cell range to format.\n     * @param {number} [decimalPlaces=1] - The number of decimal places to display after the percentage point.\n     * @return {GoogleAppsScript.Spreadsheet.Range} The same range object, allowing for method chaining.\n     * @example\n     * const rateRange = sheet.getRange(\"D2:D10\");\n     * FinancialPlanner.Utils.formatAsPercentage(rateRange, 2); // Format as 0.00%\n     */\n    formatAsPercentage: function(range, decimalPlaces = 1) {\n      const format = `0.${'0'.repeat(decimalPlaces)}%`;\n      range.setNumberFormat(format);\n      return range; // Return for chaining\n    },\n    /**\n     * Applies a background color to alternating rows within a specified range for improved readability (banding).\n     * Starts applying the color from `startRow` and continues every other row up to `endRow`.\n     * @param {GoogleAppsScript.Spreadsheet.Sheet} sheet - The sheet object to format.\n     * @param {number} startRow - The 1-based starting row index for applying the color.\n     * @param {number} endRow - The 1-based ending row index for applying the color.\n     * @param {string} [color='#f9f9f9'] - The background color to apply (hex code or color name).\n     * @return {GoogleAppsScript.Spreadsheet.Sheet} The same sheet object, allowing for method chaining.\n     * @example\n     * FinancialPlanner.Utils.setAlternatingRowColors(reportSheet, 2, 20, '#eeeeee');\n     */"}