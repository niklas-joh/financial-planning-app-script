{"chunk":0,"numChunks":7,"fileHash":"iFMCzK+BUnwG2LEFTpjh3lrg0ZQFUNXmEqEtoksiVpw=","filePath":"cline/development_workflow_guide.md","content":"# Development Workflow Guide for Cline\n\nThis document outlines the standardized development workflow, Git best practices, GitHub CLI usage, and specific instructions for Cline when working on this project. The goal is to ensure consistency, clarity, and efficiency.\n\n## I. Core Principles & Best Practices\n\n### A. Branch Management\n1.  **Always work in feature/bugfix branches:**\n    *   Never commit directly to `main` or `master`.\n    *   Create a new branch for each distinct piece of work (e.g., issue, feature, bugfix).\n2.  **Descriptive Branch Names:**\n    *   Format: `type/issue-number-short-description` (if an issue exists) or `type/short-description`.\n    *   Examples: `feature/42-add-user-authentication`, `fix/login-page-css`, `chore/update-dependencies`.\n3.  **Keep Branches Short-Lived:**\n    *   Merge branches promptly once work is complete and reviewed.\n    *   Regularly pull/rebase from the main development branch (e.g., `main`, `develop`) to keep your feature branch up-to-date and minimize merge conflicts.\n\n### B. Commit Practices\n1.  **Atomic Commits:**\n    *   Each commit should represent a single, logical, and complete change. This makes reviews easier and allows for simpler rollbacks if needed.\n2.  **Conventional Commit Format:** Adhere strictly to this format.\n    ```\n    <type>(<scope>): <short summary>\n    \n    [optional body: more detailed explanation, if necessary]\n    \n    [optional footer: e.g., \"Fixes #42\", \"Resolves #123\"]\n    ```\n    *   **Common Types:**\n        *   `feat`: A new feature for the user.\n        *   `fix`: A bug fix for the user.\n        *   `docs`: Documentation changes only.\n"}