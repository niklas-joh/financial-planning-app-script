{"chunk":8,"numChunks":12,"fileHash":"oo4KQG371O2oQazQ1GQ5P0wR6aYzUfQT4MWUnek5PHA=","filePath":"src/services/sheet-builder.js","content":"/**\nconst SheetBuilderModule = (function() {\n  class SheetBuilder {\n    addDataRows(data, options = {}) {\n      if (data.length === 0) return this;\n      \n      const startRow = this.currentRow;\n      const dataRange = this.sheet.getRange(\n        this.currentRow, 1, data.length, data[0].length\n      );\n      dataRange.setValues(data);\n      \n      // Apply formulas if provided\n      if (options.formulas && options.formulas.length > 0) {\n        options.formulas.forEach(formulaConfig => {\n          const formulaRange = this.sheet.getRange(\n            startRow,\n            formulaConfig.startColumn,\n            data.length,\n            formulaConfig.values[0].length\n          );\n          formulaRange.setFormulas(formulaConfig.values);\n        });\n      }\n      \n      // Apply formatting if provided\n      if (options.formatting) {\n        this._applyFormatting(dataRange, options.formatting);\n      }\n      \n      // Apply row-specific formatting if provided\n      if (options.rowFormatting) {\n        options.rowFormatting.forEach((format, index) => {\n          if (format) {\n            const rowRange = this.sheet.getRange(\n              startRow + index, 1, 1, data[0].length\n            );\n            this._applyFormatting(rowRange, format);\n          }\n        });\n      }\n      \n      this.currentRow += data.length;\n      return this;\n    }\n    /**\n     * Adds a summary row\n     */"}