{"chunk":13,"numChunks":15,"fileHash":"WF/+BE1W5ThwGtH1c6mstkQ0iFCyZ7d4PHM8NSeT2kI=","filePath":"cline/clasp-pull/src/tests/error-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"ErrorService\", \"log should execute without throwing (verification via logs)\", function() {\n    // We can't directly verify sheet/console output easily in automated tests.\n    // We just check that calling log doesn't throw an unexpected error itself.\n    const error = TestErrorService.create(\"Logging test\", { data: \"sample\" });\n    try {\n      TestErrorService.log(error);\n      // If we reach here, log executed without throwing internal errors.\n      T.assertTrue(true, \"log() executed without throwing an error.\");\n    } catch (e) {\n      T.assertTrue(false, `log() should not have thrown an error, but threw: ${e.message}`);\n    }\n  });\n  T.registerTest(\"ErrorService\", \"handle should call log and uiService.showErrorNotification\", function() {\n    lastErrorNotification = null; // Reset mock tracker\n    const error = TestErrorService.create(\"Handling test\", { id: 456 });\n    const userMessage = \"Something went wrong during handling test.\";\n\n    try {\n      TestErrorService.handle(error, userMessage);\n      // Check if UI service was called\n      T.assertNotNull(lastErrorNotification, \"uiService.showErrorNotification should have been called.\");\n      T.assertEquals(\"Error\", lastErrorNotification.title, \"Notification title should be 'Error'.\");\n      T.assertEquals(userMessage, lastErrorNotification.message, \"Notification message should match userFriendlyMessage.\");\n    } catch (e) {\n       T.assertTrue(false, `handle() should not have thrown an error, but threw: ${e.message}`);\n    }\n  });"}