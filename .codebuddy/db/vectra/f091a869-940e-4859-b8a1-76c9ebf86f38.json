{"chunk":9,"numChunks":11,"fileHash":"/PHrQyqA5cetRfWinyFGgGswyQob/Jj+6lGnFfyhiRY=","filePath":"cline/clasp-pull/src/core/settings-service.js","content":"/**\nFinancialPlanner.SettingsService = (function(config, utils, uiService, errorService) {\n  return {\n    /**\n     * Retrieves a preference value and coerces it to a number.\n     * @param {string} key - The preference key.\n     * @param {number} [defaultValue=0] - The default numeric value if the key is not found or cannot be parsed.\n     * @return {number} The preference value as a number.\n     *\n     * @example\n     * const maxItems = FinancialPlanner.SettingsService.getNumericValue(\"MaxDashboardItems\", 5);\n     */\n    getNumericValue: function(key, defaultValue) {\n      const value = this.getValue(key, defaultValue);\n      if (typeof value === 'number') return value;\n      const parsed = parseFloat(value);\n      return isNaN(parsed) ? (typeof defaultValue === 'number' ? defaultValue : 0) : parsed;\n    },\n    /**\n     * Toggles a boolean preference value. If the key doesn't exist, it uses `defaultValue` to determine the initial state before toggling.\n     * The new (toggled) value is then saved.\n     * @param {string} key - The preference key.\n     * @param {boolean} [defaultValue=false] - The default value to assume if the preference doesn't exist.\n     * @return {boolean} The new value after toggling.\n     *\n     * @example\n     * const newNotificationState = FinancialPlanner.SettingsService.toggleBooleanValue(\"EnableNotifications\", true);\n     * // If it was true, it's now false. If it was false or unset (defaulting to true), it's now false.\n     */\n    toggleBooleanValue: function(key, defaultValue) {\n      const currentValue = this.getBooleanValue(key, defaultValue);\n      const newValue = !currentValue;\n      this.setValue(key, newValue);\n      return newValue;\n    },"}