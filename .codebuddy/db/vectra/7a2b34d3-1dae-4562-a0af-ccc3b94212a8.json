{"chunk":11,"numChunks":12,"fileHash":"p8d89h9/WHPQmS67+JYs3cvSw5/Ads0379y44Zi09Rg=","filePath":"src/core/config.js","content":"/**\nconst ConfigModule = (function() {\n  /**\n   * Deeply merges properties from the source object into the target object.\n   * @param {object} target The target object to merge into.\n   * @param {object} source The source object to merge from.\n   * @return {object} The modified target object.\n   * @private\n   */\n  function mergeConfig(target, source) {\n    const newTarget = JSON.parse(JSON.stringify(target)); // Create a deep copy of target\n    for (const key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (source[key] instanceof Object && !(source[key] instanceof Array) && newTarget[key] instanceof Object && !(newTarget[key] instanceof Array)) {\n          newTarget[key] = mergeConfig(newTarget[key], source[key]);\n        } else {\n          newTarget[key] = source[key];\n        }\n      }\n    }\n    return newTarget;\n  }\n  /**\n   * Constructor for the ConfigModule.\n   * Initializes user-specific configuration.\n   * @constructor\n   */\n  function ConfigModuleConstructor() {\n    this.userConfig = {};\n    // All public methods will be attached to 'this' or its prototype.\n  }\n  ConfigModuleConstructor.prototype.get = function() {\n    let currentConfig = JSON.parse(JSON.stringify(DEFAULT_CONFIG)); // Start with a fresh copy of defaults\n    currentConfig = mergeConfig(currentConfig, this.userConfig);\n    return currentConfig;\n  };\n  ConfigModuleConstructor.prototype.getSection = function(section) {\n    const config = this.get();\n    return config[section] || {};\n  };\n  ConfigModuleConstructor.prototype.getSheetNames = function() {\n    return this.getSection('SHEETS');\n  };\n  ConfigModuleConstructor.prototype.getTransactionTypes = function() {\n    return this.getSection('TRANSACTION_TYPES');\n  };"}