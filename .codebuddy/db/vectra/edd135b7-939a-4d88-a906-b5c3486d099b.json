{"chunk":11,"numChunks":25,"fileHash":"kS6Otb0ktf7SNGRgDc+bn8H5lrkmK9GeXCt+rLvCNP0=","filePath":"cline/clasp-pull/src/tests/settings-service.test.js","content":"/**\n(function() {\n  const mockUtils = {\n    // Use the actual getOrCreateSheet logic but with mocked SpreadsheetApp\n     getOrCreateSheet: function(spreadsheet, sheetName) {\n      let sheet = spreadsheet.getSheetByName(sheetName);\n      if (!sheet) {\n        sheet = spreadsheet.insertSheet(sheetName);\n      } else {\n        // Don't clear content in tests unless specifically testing reset\n        // sheet.getRange(1, 1, sheet.getMaxRows(), sheet.getMaxColumns()).clearContent();\n      }\n      return sheet;\n    }\n  };\n  let lastSuccessNotification = null;\n  const mockUiService = {\n    showSuccessNotification: function(message) { lastSuccessNotification = message; },\n    // Add other methods if needed\n  };\n  let lastHandledError = null;\n  const mockErrorService = {\n    handle: function(error, message) { lastHandledError = { error: error, message: message }; },\n    create: function(message, details) { // Simple error object creation\n        const err = new Error(message);\n        err.details = details;\n        err.name = 'FinancialPlannerError'; // Simulate custom error\n        return err;\n     }\n  };\n  // --- Test Suite Setup ---\n  // Redefine the service for testing, injecting mocks"}