{"chunk":20,"numChunks":25,"fileHash":"kS6Otb0ktf7SNGRgDc+bn8H5lrkmK9GeXCt+rLvCNP0=","filePath":"src/tests/settings-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"SettingsService\", \"getValue should return default value if key not found\", function() {\n    setupMockSheet();\n    const defaultValue = \"default\";\n    const value = TestSettingsService.getValue(\"nonexistent_key\", defaultValue);\n    T.assertEquals(defaultValue, value, \"Should return default value for nonexistent key.\");\n  });\n  T.registerTest(\"SettingsService\", \"setValue should add a new preference\", function() {\n    setupMockSheet();\n    const key = \"new_pref\";\n    const value = \"new_value\";\n    TestSettingsService.setValue(key, value);\n    const retrievedValue = TestSettingsService.getValue(key, \"default\");\n    T.assertEquals(value, retrievedValue, \"Should retrieve the newly set value.\");\n    // Check sheet data directly (simplified)\n    const sheetData = mockSheetData[mockConfig._settingsSheetName];\n    T.assertEquals(2, sheetData.length, \"Sheet should have header + 1 data row.\");\n    T.assertEquals(key, sheetData[1][0], \"Key should be in the second row, first column.\");\n    T.assertEquals(value, sheetData[1][1], \"Value should be in the second row, second column.\");\n  });"}