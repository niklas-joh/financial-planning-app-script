{"chunk":50,"numChunks":54,"fileHash":"vN+W2tDiA59Daq+vJZZ4NvNU8baK6mDpzqFA2kTr3NY=","filePath":"cline/clasp-pull/src/services/financial_analysis.js","content":"/**\nFinancialPlanner.FinancialAnalysisService = (function(utils, uiService, errorService, config) {\n  return {\n    /**\n     * Creates an instance of the internal `FinancialAnalysisService` class, initializes it,\n     * and runs the analysis workflow. This is the primary entry point for generating the analysis.\n     * Provides UI feedback during the process.\n     * @param {GoogleAppsScript.Spreadsheet.Spreadsheet} spreadsheet - The active spreadsheet object.\n     * @param {GoogleAppsScript.Spreadsheet.Sheet} overviewSheet - The sheet object containing the generated financial overview data.\n     * @return {FinancialAnalysisService} An initialized instance of the internal `FinancialAnalysisService` class,\n     *         which contains the analysis results and methods for further interaction (though currently limited).\n     * @throws {Error} Re-throws any error encountered during analysis after logging and notifying the user.\n     * @public\n     * @example\n     * // Typically called internally by other services or controllers\n     * const analysisService = FinancialPlanner.FinancialAnalysisService.analyze(ss, overviewSheet);\n     */\n    analyze: function(spreadsheet, overviewSheet) {\n      try {\n        uiService.showLoadingSpinner(\"Analyzing financial data...\");\n        \n        const analysisConfig = {\n          ...config.get(),\n          // Add any additional config needed\n          TARGET_RATES: {\n            ...config.getSection('TARGET_RATES'),\n            WANTS_PLEASURE: config.getSection('TARGET_RATES').WANTS // Map WANTS to WANTS_PLEASURE for compatibility\n          }\n        };\n        \n        const service = new FinancialAnalysisService(\n          spreadsheet,\n          overviewSheet,\n          analysisConfig\n        );\n        \n        service.initialize();\n        service.analyze();\n        \n        uiService.hideLoadingSpinner();\n        \n        return service;\n      } catch (error) {\n        uiService.hideLoadingSpinner();\n        errorService.handle(error, \"Error analyzing financial data\");\n       "}