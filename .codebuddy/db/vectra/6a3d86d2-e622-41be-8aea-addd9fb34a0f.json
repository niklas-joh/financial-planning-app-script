{"chunk":28,"numChunks":30,"fileHash":"+K7Wn3694Zo7CvqWeZ2iy4UDcUumZZ0a1vWhvg0ddkM=","filePath":"src/tests/financial_analysis.test.js","content":"/**\n(function() {\n  // --- Test Cases ---\n  T.registerTest(\"FinancialAnalysisService\", \"analyze should create Analysis sheet and call sub-methods\", function() {\n      setupMockDataAndState();\n      const overviewSheet = mockActiveSpreadsheet.getSheetByName(\"Overview\");\n\n      // We test the main 'analyze' entry point which creates the internal service instance\n      const serviceInstance = TestAnalysisService.analyze(mockActiveSpreadsheet, overviewSheet);\n\n      T.assertNotNull(serviceInstance, \"Analyze should return the service instance.\");\n      const analysisSheet = mockActiveSpreadsheet.getSheetByName(\"Analysis\");\n      T.assertNotNull(analysisSheet, \"Analysis sheet should be created.\");\n\n      // Check if key sections were added (based on simplified mock implementations)\n      const analysisData = mockSheetData[\"Analysis\"];\n      let keyMetricsHeaderFound = analysisData.some(row => row[0] === \"Key Metrics Header\");\n      let expenseCatHeaderFound = analysisData.some(row => row[0] === \"Expense Cat Header\");\n\n      T.assertTrue(keyMetricsHeaderFound, \"Key Metrics section header should be added.\");\n      T.assertTrue(expenseCatHeaderFound, \"Expense Categories section header should be added.\");\n      T.assertTrue(chartsAdded.length > 0, \"Charts should be added.\");\n      T.assertTrue(lastHandledError === null, \"No error should be handled during successful analysis.\");\n  });"}