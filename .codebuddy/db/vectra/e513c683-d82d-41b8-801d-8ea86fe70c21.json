{"chunk":7,"numChunks":8,"fileHash":"5yZhuOmtqb/ofJDCAq3kLRdc5v5ILiCThcGKZUQD/PY=","filePath":"src/core/settings-service.js","content":"/**\nconst SettingsServiceModule = (function() {\n  SettingsServiceModuleConstructor.prototype.getNumericValue = function(key, defaultValue = 0) {\n    const value = this.getValue(key, defaultValue);\n    if (typeof value === 'number') return value;\n    const parsed = parseFloat(value);\n    return isNaN(parsed) ? (typeof defaultValue === 'number' ? defaultValue : 0) : parsed;\n  };\n  SettingsServiceModuleConstructor.prototype.toggleBooleanValue = function(key, defaultValue = false) {\n    const currentValue = this.getBooleanValue(key, defaultValue);\n    const newValue = !currentValue;\n    this.setValue(key, newValue);\n    return newValue;\n  };\n  SettingsServiceModuleConstructor.prototype.toggleShowSubCategories = function() {\n    return this.toggleBooleanValue('ShowSubCategories', true);\n  };\n  SettingsServiceModuleConstructor.prototype.getShowSubCategories = function() {\n    return this.getBooleanValue('ShowSubCategories', true);\n  };\n  SettingsServiceModuleConstructor.prototype.setShowSubCategories = function(value) {\n    this.setValue('ShowSubCategories', typeof value === 'boolean' ? value : true);\n  };\n  SettingsServiceModuleConstructor.prototype.getAllPreferences = function() {\n    try {\n      const sheet = this._getSettingsSheet();\n      const data = sheet.getDataRange().getValues();\n      const preferences = {};\n      for (let i = 1; i < data.length; i++) {\n        if (data[i] && data[i][0] != null && data[i][0] !== '') {\n          preferences[data[i][0]] = data[i][1];\n        }\n      }\n      return preferences;\n    } catch (error) {\n      this.errorService.handle(this.errorService.create('Error getting all preferences', { originalError: error.toString(), severity: 'medium' }), 'Failed to retrieve all settings.');\n      return {};\n    }\n  };"}