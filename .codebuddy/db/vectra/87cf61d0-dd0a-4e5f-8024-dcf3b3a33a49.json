{"chunk":5,"numChunks":10,"fileHash":"qKty2YPjJfk9NdZZT+Kl8Aescdwa/V3Jg8MhLZ7cQWs=","filePath":"cline/clasp-pull/src/tests/ui-service.test.js","content":"/**\n(function() {\n  global.CacheService = { // Mock if CacheService is used (e.g., in dropdown tests)\n      getScriptCache: function() { \n          return { \n              get: function(key){ return null; }, \n              put: function(key, value, ttl){},\n              remove: function(key) {},\n              removeAll: function(keys) {}\n          }; \n      }\n  };\n  // --- Helper to reset mocks before each test ---\n  function resetMocks() {\n    lastToast = null;\n    lastAlert = null;\n    lastPrompt = null;\n    lastSidebar = null;\n    lastModal = null;\n    alertResponse = mockUi.Button.OK; // Default OK\n    promptResponse = { button: mockUi.Button.CANCEL, text: null }; // Default Cancel\n  }\n  // --- Test Cases ---\n  T.registerTest(\"UIService\", \"showLoadingSpinner should call toast\", function() {\n    resetMocks();\n    const message = \"Loading data...\";\n    UIService.showLoadingSpinner(message);\n    T.assertNotNull(lastToast, \"Spreadsheet.toast should have been called.\");\n    T.assertEquals(message, lastToast.message, \"Toast message should match.\");\n    T.assertEquals(\"Working...\", lastToast.title, \"Toast title should be 'Working...'.\");\n  });\n  T.registerTest(\"UIService\", \"hideLoadingSpinner should call toast with empty message and short timeout\", function() {\n    resetMocks();\n    UIService.hideLoadingSpinner();\n    T.assertNotNull(lastToast, \"Spreadsheet.toast should have been called for hiding.\");\n    T.assertEquals(\"\", lastToast.message, \"Toast message for hiding should be empty.\");\n    T.assertEquals(\"\", lastToast.title, \"Toast title for hiding should be empty.\");\n    T.assertEquals(1, lastToast.timeout, \"Toast timeout for hiding should be 1.\");\n  });"}