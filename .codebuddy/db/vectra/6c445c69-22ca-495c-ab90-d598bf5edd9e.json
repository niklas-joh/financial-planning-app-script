{"chunk":6,"numChunks":8,"fileHash":"5yZhuOmtqb/ofJDCAq3kLRdc5v5ILiCThcGKZUQD/PY=","filePath":"src/services/settings-service.js","content":"/**\nconst SettingsServiceModule = (function() {\n  SettingsServiceModuleConstructor.prototype.getValue = function(key, defaultValue) {\n    try {\n      const preference = this._findPreference(key);\n      return preference ? preference.value : defaultValue;\n    } catch (error) {\n      this.errorService.handle(this.errorService.create(`Error getting setting value for key: ${key}`, { originalError: error.toString(), severity: 'medium' }), `Failed to get setting: ${key}`);\n      return defaultValue;\n    }\n  };\n  SettingsServiceModuleConstructor.prototype.setValue = function(key, value) {\n    try {\n      const sheet = this._getSettingsSheet();\n      const preference = this._findPreference(key);\n      if (preference) {\n        sheet.getRange(preference.row, 2).setValue(value);\n      } else {\n        const lastRow = Math.max(1, sheet.getLastRow());\n        sheet.getRange(lastRow + 1, 1, 1, 2).setValues([[key, value]]);\n      }\n    } catch (error) {\n      this.errorService.handle(this.errorService.create(`Error setting setting value for key: ${key}`, { originalError: error.toString(), valueToSet: value, severity: 'high' }), `Failed to set setting: ${key}`);\n    }\n  };\n  SettingsServiceModuleConstructor.prototype.getBooleanValue = function(key, defaultValue = false) {\n    const value = this.getValue(key, defaultValue);\n    if (typeof value === 'boolean') return value;\n    if (value === 'true' || value === 1 || value === '1') return true;\n    if (value === 'false' || value === 0 || value === '0') return false;\n    return !!defaultValue;\n  };"}