{"chunk":28,"numChunks":34,"fileHash":"T/csnKZ9ifEIVTqGo1Q4UaU7vyWah1cMM07aoFVML48=","filePath":"cline/clasp-pull/src/tests/finance_overview.test.js","content":"/**\n(function() {\n   const TestFinanceOverview = (function(utils, uiService, cacheService, errorService, config, settingsService, analysisServiceInstance) {\n        class FinancialOverviewBuilder {\n             constructor() { /* ... */ }\n             initialize() { this.spreadsheet = SpreadsheetApp.getActiveSpreadsheet(); const sheetNames = config.getSection('SHEETS'); this.overviewSheet = utils.getOrCreateSheet(this.spreadsheet, sheetNames.OVERVIEW); clearSheetContent(this.overviewSheet); this.transactionSheet = this.spreadsheet.getSheetByName(sheetNames.TRANSACTIONS); if (!this.transactionSheet) throw errorService.create(`Sheet \"${sheetNames.TRANSACTIONS}\" not found`); this.showSubCategories = getUserPreference(\"ShowSubCategories\", true); return this; }\n             processData() { const { data, indices } = getProcessedTransactionData(this.transactionSheet); this.transactionData = data; this.columnIndices = indices; this.categoryCombinations = cacheService.get(config.getSection('CACHE').KEYS.CATEGORY_COMBINATIONS, () => getUniqueCategoryCombinations(this.transactionData, this.columnIndices.type, this.columnIndices.category, this.columnIndices.subcategory, this.showSubCategories)); this.groupedCombinations = cacheService.get(config.getSection('CACHE').KEYS.GROUPED_COMBINATIONS, () => groupCategoryCombinations(this.categoryCombinations)); return this; }\n             setupHeader() { setupHeaderRow(this.overviewSheet, this.showSubCategories); return this; }\n             generateContent() { let rowIndex = 2; config.getSection('TYPE_ORDER').forEach(type => { if (!this.groupedCombinations[type]) return; rowIndex = addTypeHeaderRow(this.overviewSheet, type, rowIndex); rowIndex = addCategoryRows(this.overviewSheet, this.groupedCombinations[type], rowIndex, type, this.columnIndices); rowIndex = addTypeSubtotalRow(this.overviewSheet, type, rowIndex, this.groupedCombinations"}