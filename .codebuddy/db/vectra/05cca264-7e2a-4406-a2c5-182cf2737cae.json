{"chunk":11,"numChunks":25,"fileHash":"f+DVHertk8Vofto68USweVqQ1XJB474SC9cN3OV7d2s=","filePath":"src/features/financial-overview/finance_overview.js","content":"/**\nFinancialPlanner.FinanceOverview = (function(\n) {\n  class FinancialOverviewBuilder {\n    buildExpenseSection() {\n      const expenseTypes = config.getSection('EXPENSE_TYPES');\n      const colors = config.getSection('COLORS');\n      const expenseTypeTotalRows = [];\n      let hasExpenses = false;\n      // Check if we have any expenses\n      expenseTypes.forEach(type => {\n        if (this.groupedData[type] && this.groupedData[type].length > 0) {\n          hasExpenses = true;\n        }\n      });\n      if (!hasExpenses) return;\n      this.builder.addSectionHeader('Expenses', {\n        merge: 18,\n        background: colors.UI.SECTION_HEADER_BG || '#d3d3d3',\n        fontWeight: 'bold',\n        fontSize: 12\n      });\n      // Add each expense type\n      expenseTypes.forEach(type => {\n        const typeData = this.groupedData[type];\n        if (!typeData || typeData.length === 0) return;\n        \n        const typeRow = this.builder.getCurrentRow();\n        expenseTypeTotalRows.push(typeRow);\n        \n        // Add type total row with embedded formulas\n        this.addTypeRowWithEmbeddedTotals(type, typeRow);\n        \n        // Add category rows\n        const categoryData = typeData.map(combo => [\n          combo.type,\n          combo.category,\n          combo.subcategory,\n          ''\n        ]);\n        \n        const startRow = this.builder.getCurrentRow();\n        const formulas = this.generateRowFormulas(typeData, startRow);\n        \n        this.builder.addDataRows(categoryData, {\n          formulas: formulas\n        });\n        \n        // Add checkboxes for shared expenses\n        for (let i = 0; i < typeData.length; i++) {\n          this.builder.sheet.getRange(startRow + i, 4).insertCheckboxes();\n        }\n        \n        this.builder.addBlankRow();\n      });\n      // Add total expenses row"}