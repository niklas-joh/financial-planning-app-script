{"chunk":22,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"src/tests/cache-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"CacheService\", \"get should not use cache if disabled\", function() {\n    setupTestState();\n    mockCacheEnabled = false; // Disable cache via mock config\n    let computeCount = 0;\n    const key = \"disabled_key\";\n    const expectedValue = \"computed when disabled\";\n    const computeFunc = () => { computeCount++; return expectedValue; };\n    const namespacedKey = `fp_${key}`;\n\n    // Pre-populate caches\n    TestCacheService._getMemoryCache()[namespacedKey] = { value: \"memory value\", expiry: Date.now() + 10000 };\n    mockScriptCacheStore[namespacedKey] = { value: JSON.stringify(\"script value\"), expiry: Date.now() + 10000 };\n\n    const result = TestCacheService.get(key, computeFunc);\n\n    T.assertEquals(1, computeCount, \"Compute function should always be called when cache is disabled.\");\n    T.assertEquals(expectedValue, result, \"Should return the computed value when cache is disabled.\");\n    // Optionally check caches weren't modified (though put also checks isCacheEnabled)\n  });"}