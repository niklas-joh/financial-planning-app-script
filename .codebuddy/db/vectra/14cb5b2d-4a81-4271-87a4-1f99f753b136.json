{"chunk":14,"numChunks":34,"fileHash":"T/csnKZ9ifEIVTqGo1Q4UaU7vyWah1cMM07aoFVML48=","filePath":"src/tests/finance_overview.test.js","content":"/**\n(function() {\n  const mockSheet = {\n    getRange: function(row, col, numRows = 1, numCols = 1) { /* ... simplified ... */\n         while(this._dataRef.length < row + numRows -1) this._dataRef.push([]);\n         const maxCols = col + numCols -1;\n         this._dataRef.forEach(r => { while(r.length < maxCols) r.push(\"\"); });\n         return Object.assign({}, mockRange, { _sheetName: this._name, _row: row, _col: col, _numRows: numRows, _numCols: numCols, _sheetDataRef: this._dataRef });\n    },\n     getRange: function(a1Notation) { // Overload for A1 notation used by handleEdit\n        // Very simplified parser for R C notation used in mockRange.getA1Notation\n        if (a1Notation && a1Notation.startsWith(\"R\") && a1Notation.includes(\"C\")) {\n            const parts = a1Notation.substring(1).split(\"C\");\n            const row = parseInt(parts[0], 10);\n            const col = parseInt(parts[1], 10);\n             if (!isNaN(row) && !isNaN(col)) {\n                 return this.getRange(row, col, 1, 1);\n             }\n        }\n        // Fallback for actual A1 like 'T1'\n        if (a1Notation === 'T1') return this.getRange(1, 20); // Assuming T = 20\n        if (a1Notation === 'S1') return this.getRange(1, 19); // Assuming S = 19\n        // Add more specific A1 mappings if needed by tests\n        throw new Error(`MockSheet.getRange(A1) not implemented for: ${a1Notation}`);\n    },\n    getLastRow: function() { return this._dataRef.length"}