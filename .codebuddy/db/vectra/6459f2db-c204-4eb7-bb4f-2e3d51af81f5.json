{"chunk":21,"numChunks":32,"fileHash":"EGim/Ynj/8ex+ANaWj1uKBWsGdoONzQU8Kj/M33Ydzo=","filePath":"cline/clasp-pull/src/tests/monthly_spending_report.test.js","content":"/**\n(function() {\n   const TestMonthlySpendingReport = (function(utils, uiService, errorService, config) {\n        function calculatePreviousMonthsAverage(sheet, data, category, subcategory, dateColIndex, typeColIndex, categoryColIndex, subcategoryColIndex, amountColIndex, monthsToLookBack) { const now = new Date(); const currentMonth = now.getMonth(); const currentYear = now.getFullYear(); let totalAmount = 0; let monthsFound = 0; for (let i = 1; i <= monthsToLookBack; i++) { let targetMonth = currentMonth - i; let targetYear = currentYear; if (targetMonth < 0) { targetMonth += 12; targetYear--; } const monthlyTransactions = data.filter((row, index) => { if (index === 0) return false; const date = new Date(row[dateColIndex]); return date.getMonth() === targetMonth && date.getFullYear() === targetYear && row[categoryColIndex] === category && (row[subcategoryColIndex] || \"(None)\") === subcategory; }); let monthTotal = 0; monthlyTransactions.forEach(row => { const amount = Math.abs(parseFloat(row[amountColIndex]) || 0); monthTotal += amount; }); if (monthlyTransactions.length > 0) { totalAmount += monthTotal; monthsFound++; } } return monthsFound > 0 ? totalAmount / monthsFound : 0; }"}