{"chunk":33,"numChunks":34,"fileHash":"T/csnKZ9ifEIVTqGo1Q4UaU7vyWah1cMM07aoFVML48=","filePath":"src/tests/finance_overview.test.js","content":"/**\n(function() {\n  T.registerTest(\"FinanceOverview\", \"handleEdit should update preference and recreate on checkbox change\", function() {\n      setupMockDataAndState();\n      mockUserPropertiesStore[\"ShowSubCategories\"] = true; // Initial state\n\n      const overviewSheet = mockActiveSpreadsheet.getSheetByName(\"Overview\");\n      const checkboxCell = overviewSheet.getRange(mockConfig._data.UI.SUBCATEGORY_TOGGLE.CHECKBOX_CELL); // e.g., T1\n      checkboxCell.setValue(false); // Simulate user unchecking the box\n\n      const mockEvent = {\n          range: checkboxCell,\n          value: false, // The new value after edit\n          oldValue: true,\n          source: mockActiveSpreadsheet\n      };\n\n      // Reset interaction flags before calling handleEdit\n      settingsSetValueLog = {};\n      cacheInvalidateAllCalled = false;\n      analysisServiceAnalyzeCalled = false;\n      lastToast = null;\n\n      TestFinanceOverview.handleEdit(mockEvent);\n\n      T.assertTrue(settingsSetValueLog[\"ShowSubCategories\"] > 0, \"settingsService.setValue('ShowSubCategories') should be called.\");\n      T.assertEquals(false, mockUserPropertiesStore[\"ShowSubCategories\"], \"User preference should be updated to false.\");\n      // Check if create was called again (indicated by its interactions)\n      T.assertTrue(cacheInvalidateAllCalled, \"cacheService.invalidateAll should be called by subsequent create().\");\n      T.assertTrue(analysisServiceAnalyzeCalled, \"analysisService.analyze should be called by subsequent create().\");\n      T.assertNotNull(lastToast, \"Success notification should be shown by subsequent create().\");\n       T.assertEquals(\"Financial overview generated successfully!\", lastToast.message, \"Correct success message from create() expected.\");\n  });"}