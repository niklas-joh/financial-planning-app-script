{"chunk":6,"numChunks":14,"fileHash":"m+ILWFttSzMQvZs28WTEsXBRFJ7fzh2IK0bjpCXfnaI=","filePath":"cline/clasp-pull/src/core/cache-service.js","content":"/**\nFinancialPlanner.CacheService = (function(config) {\n  return {\n    /**\n     * Gets a value from the cache. If the value is not found or is expired,\n     * it computes the value using the provided function, caches it, and then returns it.\n     * If caching is disabled via configuration, it directly calls the computeFunction.\n     *\n     * @param {string} key The unique key for the cache entry.\n     * @param {function(): any} computeFunction A function that computes the value if it's not in the cache.\n     *                                        This function should return the value to be cached.\n     * @param {number} [expirySeconds] The number of seconds for which the item should be cached.\n     *                                 Defaults to the value from `config.getSection('CACHE').EXPIRY_SECONDS` or 3600.\n     * @return {any} The cached or computed value.\n     *\n     * @example\n     * const expensiveData = FinancialPlanner.CacheService.get('myDataKey', function() {\n     *   return someExpensiveCalculation();\n     * }, 600); // Cache for 10 minutes\n     *\n     * @example\n     * // Using default expiry\n     * const anotherData = FinancialPlanner.CacheService.get('anotherKey', function() {\n     *   return fetchSomeData();\n     * });\n     */"}