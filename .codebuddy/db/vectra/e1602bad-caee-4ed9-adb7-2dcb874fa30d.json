{"chunk":19,"numChunks":20,"fileHash":"o9TH+WxWjuhYMssoSmFWfKxIkklvisnvxWTURfiVSIQ=","filePath":"src/services/monthly_spending_report.js","content":"/**\nFinancialPlanner.MonthlySpendingReport = (function(utils, uiService, errorService, config) {\n  function createMonthlySpendingReport() {\n    // Prepare total row data\n    const totalRowData = [\"TOTAL EXPENSES\", \"\", totalExpenses, totalExpenses > 0 ? 1 : 0, \"\", \"\"];\n    reportData.push(totalRowData);\n    formatInfo.push({ row: currentRowIndex, type: 'totalRow' });\n    const finalDataRowIndex = currentRowIndex; // Keep track of the last data row\n    // Batch write all data\n    if (reportData.length > 0) {\n        reportSheet.getRange(4, 1, reportData.length, 6).setValues(reportData);\n    }\n    // --- Apply Formatting (can still involve loops, but fewer I/O calls) ---\n    // Apply number formats in batches\n    if (finalDataRowIndex >= 4) {\n        // Amount column (C) and Avg column (E)\n        utils.formatAsCurrency(reportSheet.getRange(4, 3, finalDataRowIndex - 4 + 1, 1), config.getLocale().CURRENCY_SYMBOL, config.getLocale().CURRENCY_LOCALE);\n        utils.formatAsCurrency(reportSheet.getRange(4, 5, finalDataRowIndex - 4 + 1, 1), config.getLocale().CURRENCY_SYMBOL, config.getLocale().CURRENCY_LOCALE);\n        // Percentage column (D)\n        reportSheet.getRange(4, 4, finalDataRowIndex - 4 + 1, 1).setNumberFormat(\"0.0%\");\n    }\n    // Apply row-specific formatting based on collected info"}