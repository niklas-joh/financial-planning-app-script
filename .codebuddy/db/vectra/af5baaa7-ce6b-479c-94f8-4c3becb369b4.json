{"chunk":2,"numChunks":7,"fileHash":"iFMCzK+BUnwG2LEFTpjh3lrg0ZQFUNXmEqEtoksiVpw=","filePath":"cline/development_workflow_guide.md","content":"5.  **Merge Strategy:** Typically \"Squash and merge\" for feature branches to keep the main branch history clean. \"Rebase and merge\" can be used if preserving the commit history of the feature branch is important.\n\n### D. General Git Tips\n1.  **Pull Before Pushing:** Run `git pull` (or `git pull --rebase` for a linear history) before pushing your changes to minimize merge conflicts.\n2.  **Regularly Fetch:** Use `git fetch origin` to stay updated with remote changes.\n3.  **`git status` is Your Friend:** Use it frequently to understand the state of your working directory and staged files.\n\n## II. GitHub CLI (`gh`) Usage\n\nThe GitHub CLI (`gh`) is a powerful tool for interacting with GitHub from the command line.\n\n### A. Managing Issues\n*   **Create an Issue:**\n    ```bash\n    gh issue create --title \"Your Detailed Issue Title\" --body-file path/to/description.md --label \"type:enhancement,type:bug,priority:high\" --assignee \"username\"\n    ```\n    *(Cline: I will use `cline/issue_description.md` for the body file and then delete it.)*\n*   **List Issues:**\n    ```bash\n    gh issue list --label \"type:bug\" --state open\n    ```\n*   **View an Issue:**\n    ```bash\n    gh issue view ISSUE_NUMBER\n    ```\n*   **Comment on an Issue:**\n    ```bash\n    gh issue comment ISSUE_NUMBER --body \"Update: Progress made on sub-task X.\"\n    ```\n*   **Close an Issue:**\n    ```bash\n    gh issue close ISSUE_NUMBER --comment \"Resolved with commit XXXXXX. PR #YY merged.\"\n    ```\n\n### B. Branching with Issues\n*   **Create a branch linked to an issue:**\n    ```bash\n    gh issue develop ISSUE_NUMBER -b <type>/<ISSUE_NUMBER>-<short-description> -c\n"}