{"chunk":3,"numChunks":6,"fileHash":"aeJ+6NsjPWqgtdePfSeG/7XCmLZxhAHzOzWx8N+V98I=","filePath":"src/tests/config.test.js","content":"/**\n(function() {\n  // Alias for easier access\n  const T = FinancialPlanner.Testing;\n  const Config = FinancialPlanner.Config;\n  // --- Test Suite for FinancialPlanner.Config ---\n  T.registerTest(\"Config\", \"should return the complete configuration object\", function() {\n    const config = Config.get();\n    T.assertNotNull(config, \"Config object should not be null.\");\n    T.assertTrue(typeof config === 'object', \"Config should be an object.\");\n    T.assertNotNull(config.SHEETS, \"Config should contain SHEETS section.\");\n  });\n  T.registerTest(\"Config\", \"should return a specific configuration section\", function() {\n    const sheetsSection = Config.getSection('SHEETS');\n    T.assertNotNull(sheetsSection, \"SHEETS section should not be null.\");\n    T.assertEquals(\"Overview\", sheetsSection.OVERVIEW, \"SHEETS.OVERVIEW should be 'Overview'.\");\n\n    const colorsSection = Config.getSection('COLORS');\n    T.assertNotNull(colorsSection, \"COLORS section should not be null.\");\n    T.assertNotNull(colorsSection.UI, \"COLORS.UI section should exist.\");\n    T.assertEquals(\"#C62828\", colorsSection.UI.HEADER_BG, \"COLORS.UI.HEADER_BG should be '#C62828'.\");\n  });\n  T.registerTest(\"Config\", \"should return an empty object for non-existent section\", function() {\n    const nonExistent = Config.getSection('NON_EXISTENT_SECTION');\n    T.assertNotNull(nonExistent, \"Result for non-existent section should not be null.\");\n    T.assertTrue(typeof nonExistent === 'object', \"Result should be an object.\");\n    T.assertEquals(0, Object.keys(nonExistent).length, \"Result for non-existent section should be an empty object.\");\n  });"}