{"chunk":5,"numChunks":10,"fileHash":"YkAHVxQlD9SNvww7C5mYEgdVTfdlnDD9wi4+5rkOXLM=","filePath":"src/services/metrics-calculator.js","content":"/**\nconst MetricsCalculatorModule = (function() {\n  /**\n   * Constructor for the MetricsCalculatorModule.\n   * @param {object} configInstance - An instance of ConfigModule.\n   * @constructor\n   */\n  function MetricsCalculatorModuleConstructor(configInstance) {\n    this.config = configInstance;\n  }\n  /**\n   * Calculates savings rate\n   * @param {number} income Total income\n   * @param {number} savings Total savings\n   * @returns {number} Savings rate as decimal\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateSavingsRate = function(income, savings) {\n    if (income === 0) return 0;\n    return savings / income;\n  };\n  /**\n   * Calculates expense rate by category\n   * @param {number} expense Expense amount (can be negative)\n   * @param {number} income Total income\n   * @returns {number} Expense rate as decimal\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateExpenseRate = function(expense, income) {\n    if (income === 0) return 0;\n    return Math.abs(expense) / income;\n  };\n  /**\n   * Calculates variance from target\n   * @param {number} actual Actual value\n   * @param {number} target Target value\n   * @returns {number} Variance (actual - target)\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateVariance = function(actual, target) {\n    return actual - target;\n  };\n  /**\n   * Calculates percentage change\n   * @param {number} current Current value\n   * @param {number} previous Previous value\n   * @returns {number} Percentage change as decimal\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculatePercentageChange = function(current, previous) {\n    if (previous === 0) return current > 0 ? 1 : 0;\n    return (current - previous) / previous;\n  };"}