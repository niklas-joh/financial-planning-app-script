{"chunk":24,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"cline/clasp-pull/src/tests/dropdowns.test.js","content":"/**\n(function() {\n  T.registerTest(\"DropdownService\", \"handleEdit on Type should update Category dropdown\", function() {\n      setupMockSheets();\n      const transactionsSheet = mockActiveSpreadsheet.getSheetByName(\"Transactions\");\n      const editRange = transactionsSheet.getRange(4, 3); // New row (R4), Type column (C3)\n      editRange.setValue(\"Expense\"); // Set the type value that triggers the edit\n\n      const mockEvent = { range: editRange, source: mockActiveSpreadsheet, value: \"Expense\" };\n      TestDropdownService.handleEdit(mockEvent);\n\n      // Check validation on Category cell (R4, C4)\n      const categoryCellA1 = `R4C4`;\n      const validationRule = dataValidations[\"Transactions\"] ? dataValidations[\"Transactions\"][categoryCellA1] : null;\n      T.assertNotNull(validationRule, \"Data validation should be set on Category cell.\");\n      // Check options (includes placeholder + sheet data)\n      T.assertTrue(validationRule._values.includes(\"Food\"), \"Category options should include 'Food'.\");\n      T.assertTrue(validationRule._values.includes(\"Utilities\"), \"Category options should include 'Utilities'.\");\n      T.assertEquals(TestDropdownService.DROPDOWN_CONFIG.UI.PLACEHOLDER_TEXT, validationRule._values[0], \"First option should be placeholder.\");\n      // Check highlighting\n      T.assertEquals(TestDropdownService.DROPDOWN_CONFIG.UI.PENDING_BACKGROUND, transactionsSheet.getRange(4, 4)._background, \"Category cell should be highlighted.\");\n  });"}