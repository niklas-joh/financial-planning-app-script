{"chunk":6,"numChunks":10,"fileHash":"YkAHVxQlD9SNvww7C5mYEgdVTfdlnDD9wi4+5rkOXLM=","filePath":"src/services/metrics-calculator.js","content":"/**\nconst MetricsCalculatorModule = (function() {\n  /**\n   * Calculates net income after expenses\n   * @param {number} income Total income\n   * @param {number} expenses Total expenses (typically negative)\n   * @returns {number} Net income\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateNetIncome = function(income, expenses) {\n    return income + expenses; // expenses are negative\n  };\n  /**\n   * Calculates allocatable income\n   * @param {number} income Total income\n   * @param {number} essentials Essential expenses (negative)\n   * @param {number} wants Wants expenses (negative)\n   * @param {number} savings Savings amount (positive)\n   * @returns {number} Allocatable income\n   */\n  MetricsCalculatorModuleConstructor.prototype.calculateAllocatableIncome = function(income, essentials, wants, savings) {\n    return income + essentials + wants - savings;\n  };\n  /**\n   * Aggregates metrics by category\n   * @param {Array} transactions Array of transaction objects\n   * @param {string} categoryField Field name for category grouping\n   * @returns {Object} Aggregated data by category\n   */\n  MetricsCalculatorModuleConstructor.prototype.aggregateByCategory = function(transactions, categoryField) {\n    return transactions.reduce((acc, transaction) => {\n      const category = transaction[categoryField];\n      if (!acc[category]) {\n        acc[category] = { \n          count: 0, \n          total: 0, \n          transactions: [],\n          average: 0\n        };\n      }\n      acc[category].count++;\n      acc[category].total += transaction.amount;\n      acc[category].transactions.push(transaction);\n      acc[category].average = acc[category].total / acc[category].count;\n      return acc;\n    }, {});\n  };"}