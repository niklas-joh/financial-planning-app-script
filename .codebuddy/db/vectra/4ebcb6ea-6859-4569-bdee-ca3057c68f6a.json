{"chunk":30,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"cline/clasp-pull/src/tests/dropdowns.test.js","content":"/**\n(function() {\n    T.registerTest(\"DropdownService\", \"handleEdit changing Type should clear invalid Category/SubCategory\", function() {\n      setupMockSheets();\n      const transactionsSheet = mockActiveSpreadsheet.getSheetByName(\"Transactions\");\n      // Pre-set row 2: Expense, Food, Groceries\n      transactionsSheet.getRange(2, 3).setValue(\"Expense\");\n      transactionsSheet.getRange(2, 4).setValue(\"Food\");\n      transactionsSheet.getRange(2, 5).setValue(\"Groceries\");\n       // Set validation for sub-category based on initial state\n       const initialSubCatRule = SpreadsheetApp.newDataValidation().requireValueInList(['Please select', 'Groceries', 'Restaurants'], true).build();\n       transactionsSheet.getRange(2, 5).setDataValidation(initialSubCatRule);\n      // Edit Type in R2 to Income\n      const editRange = transactionsSheet.getRange(2, 3);\n      editRange.setValue(\"Income\");\n      const mockEvent = { range: editRange, source: mockActiveSpreadsheet, value: \"Income\" };\n      TestDropdownService.handleEdit(mockEvent);\n      // Check Category (R2, C4) - should be cleared and highlighted\n      T.assertEquals(\"\", transactionsSheet.getRange(2, 4).getValue(), \"Category should be cleared as 'Food' is not valid for 'Income'.\");\n      T.assertEquals(TestDropdownService.DROPDOWN_CONFIG.UI.PENDING_BACKGROUND, transactionsSheet.getRange(2, 4)._background, \"Category cell should be highlighted after Type change makes it invalid.\");\n      // Check Sub-Category (R2, C5) - should be cleared and validation removed\n      T.assertEquals(\"\", transactionsSheet.getRange(2, 5).getValue(), \"Sub-Category should be cleared.\");\n       const subCategoryCellA1 = `R2C5`;"}