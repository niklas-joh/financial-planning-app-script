{"chunk":7,"numChunks":11,"fileHash":"/PHrQyqA5cetRfWinyFGgGswyQob/Jj+6lGnFfyhiRY=","filePath":"cline/clasp-verify/src/core/settings-service.js","content":"/**\nFinancialPlanner.SettingsService = (function(config, utils, uiService, errorService) {\n  return {\n    /**\n     * Retrieves the value of a specific preference.\n     * If the preference key is not found, it returns the `defaultValue`.\n     * Errors are handled by `errorService`.\n     * @param {string} key - The unique key for the preference (e.g., \"UserTheme\").\n     * @param {any} [defaultValue] - The value to return if the key is not found.\n     * @return {any} The stored preference value, or `defaultValue`.\n     *\n     * @example\n     * const theme = FinancialPlanner.SettingsService.getValue(\"UserTheme\", \"light\");\n     * const itemsPerPage = FinancialPlanner.SettingsService.getValue(\"ItemsPerPage\", 10);\n     */\n    getValue: function(key, defaultValue) {\n      try {\n        const preference = findPreference(key);\n        return preference ? preference.value : defaultValue;\n      } catch (error) {\n        errorService.handle(errorService.create(`Error getting setting value for key: ${key}`, { originalError: error.toString() }), `Failed to get setting: ${key}`);\n        return defaultValue;\n      }\n    },\n    /**\n     * Sets or updates the value of a specific preference.\n     * If the preference key exists, its value is updated. If not, a new preference entry is created.\n     * Errors are handled by `errorService`.\n     * @param {string} key - The unique key for the preference.\n     * @param {any} value - The value to store for the preference.\n     * @return {void}\n     *\n     * @example\n     * FinancialPlanner.SettingsService.setValue(\"UserTheme\", \"dark\");\n     * FinancialPlanner.SettingsService.setValue(\"NotificationsEnabled\", true);\n     */"}