{"chunk":9,"numChunks":10,"fileHash":"qKty2YPjJfk9NdZZT+Kl8Aescdwa/V3Jg8MhLZ7cQWs=","filePath":"src/tests/ui-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"UIService\", \"showPromptDialog should return null on Cancel\", function() {\n    resetMocks();\n    promptResponse = { button: mockUi.Button.CANCEL, text: null }; // Simulate Cancel\n    const result = UIService.showPromptDialog(\"Title\", \"Message\");\n    T.assertTrue(result === null, \"Should return null when user clicks Cancel.\");\n  });\n  T.registerTest(\"UIService\", \"showSidebar should call ui.showSidebar with configured HtmlOutput\", function() {\n      resetMocks();\n      const title = \"My Sidebar\";\n      const content = \"<h1>Sidebar Content</h1>\";\n      UIService.showSidebar(title, content);\n      \n      T.assertNotNull(lastSidebar, \"ui.showSidebar should have been called.\");\n      T.assertEquals(title, lastSidebar.title, \"Sidebar title should match.\");\n      T.assertEquals(content, lastSidebar.content, \"Sidebar content should match.\");\n      T.assertEquals(300, lastSidebar.width, \"Sidebar width should default to 300.\"); // Default width check\n  });\n  T.registerTest(\"UIService\", \"showModalDialog should call ui.showModalDialog with configured HtmlOutput\", function() {\n      resetMocks();\n      const title = \"My Modal\";\n      const content = \"<h2>Modal Content</h2>\";\n      const width = 500;\n      const height = 350;\n      UIService.showModalDialog(title, content, width, height);\n      \n      T.assertNotNull(lastModal, \"ui.showModalDialog should have been called.\");\n      T.assertEquals(title, lastModal.title, \"Modal title should match.\");\n      T.assertEquals(content, lastModal.content, \"Modal content should match.\");\n      T.assertEquals(width, lastModal.width, \"Modal width should match.\");\n      T.assertEquals(height, lastModal.height, \"Modal height should match.\");\n  });"}