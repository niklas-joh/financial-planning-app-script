{"chunk":0,"numChunks":2,"fileHash":"dL+gXorXFyukGN6dHwk7pNkzR5Q00/Bt2oDsYkzDVgc=","filePath":"cline/instructions.md","content":"# Cline Instructions\n\nThis file contains instructions and best practices for working with this repository, particularly focusing on GitHub CLI workflows and git best practices.\n\n## GitHub CLI Usage\n\nFor detailed GitHub CLI usage, refer to [github_cli_workflow.md](./github_cli_workflow.md) in this directory.\n\n## Git Workflow Best Practices\n\n### Branch Management\n\n1. **Always work in feature branches**\n   - Never commit directly to main/master\n   - Create a new branch for each feature or bugfix\n\n2. **Use descriptive branch names**\n   - Format: `type/short-description`\n   - Examples: `feature/add-dropdown-filter`, `fix/dropdown-selection-bug`\n\n3. **Keep branches short-lived**\n   - Merge or delete branches once the feature is complete\n   - Regularly pull changes from main to avoid divergence\n\n### Commit Practices\n\n1. **Make atomic commits**\n   - Each commit should represent a single logical change\n   - This makes it easier to review, revert, or cherry-pick changes\n\n2. **Follow conventional commit format**\n   ```\n   <type>: <short summary>\n   \n   [optional body]\n   \n   [optional footer]\n   ```\n\n3. **Common types**:\n   - `feat`: A new feature\n   - `fix`: A bug fix\n   - `docs`: Documentation changes\n   - `style`: Changes that don't affect code meaning\n   - `refactor`: Code changes that neither fix a bug nor add a feature\n   - `perf`: Performance improvements\n   - `test`: Adding or correcting tests\n   - `chore`: Changes to build process or auxiliary tools\n\n4. **Reference issues in commits**\n   - Use keywords like \"Fixes #42\" or \"Resolves #42\"\n   - This automatically links the commit to the issue\n\n### Pull Request Workflow\n\n1. **Create descriptive PRs**\n   - Clear title that summarizes the change\n   - Detailed description explaining the what and why\n   - Reference related issues\n\n2. **Keep PRs focused and reasonably sized**\n"}