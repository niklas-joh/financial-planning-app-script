{"chunk":23,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"src/tests/dropdowns.test.js","content":"/**\n(function() {\n  T.registerTest(\"DropdownService\", \"refreshCache should clear script cache and rebuild internal cache\", function() {\n      setupMockSheets();\n      // Populate script cache\n      mockScriptCacheStore[TestDropdownService.DROPDOWN_CONFIG.CACHE_KEY] = JSON.stringify({ typeToCategories: { \"Test\": [\"Cached\"] } });\n      // Initialize internal cache (might already be done by setup)\n      TestDropdownService.initializeCache();\n\n      TestDropdownService.refreshCache();\n\n      // Check script cache was cleared (or attempted to be cleared via remove)\n      T.assertTrue(mockScriptCacheStore[TestDropdownService.DROPDOWN_CONFIG.CACHE_KEY] === undefined, \"Script cache should be cleared by refreshCache.\");\n      // Check internal cache was rebuilt (verify content based on mock sheet data)\n      const internalCache = TestDropdownService.dropdownCache; // Access internal state for test verification\n      T.assertNotNull(internalCache, \"Internal cache should be rebuilt.\");\n      T.assertTrue(!!internalCache.typeToCategories[\"Expense\"], \"Internal cache should contain 'Expense' type after rebuild.\");\n      T.assertTrue(internalCache.typeToCategories[\"Expense\"].includes(\"Food\"), \"Expense categories should include 'Food'.\");\n      T.assertNotNull(lastToast, \"Success notification should be shown after refresh.\");\n      T.assertEquals(\"Dropdown cache has been refreshed.\", lastToast.message, \"Correct success message expected.\");\n  });"}