{"chunk":6,"numChunks":8,"fileHash":"TyImlfjY3LNlomYOmDP2vgD5cwfPST418dCF0ywcs8U=","filePath":"src/services/error-service.js","content":"/**\nconst ErrorServiceModule = (function() {\n  function logToSheet(error, configService) {\n    try {\n      const ss = SpreadsheetApp.getActiveSpreadsheet();\n      // Assumes FinancialPlanner.Utils is available globally or will be refactored.\n      // If Utils becomes a class, it might need to be injected as well.\n      const errorSheet = FinancialPlanner.Utils.getOrCreateSheet(ss, configService.getSheetNames().ERROR_LOG);\n\n      if (errorSheet.getLastRow() === 0) {\n        errorSheet.appendRow(['Timestamp', 'Error Type', 'Message', 'Details']);\n        errorSheet.getRange(1, 1, 1, 4).setFontWeight('bold');\n      }\n\n      const errorDetails = error.details || {};\n      const formattedDetails = JSON.stringify(errorDetails);\n\n      errorSheet.appendRow([\n        error.timestamp || new Date(),\n        error.name || 'Error',\n        error.message,\n        formattedDetails,\n      ]);\n\n      const lastRow = errorSheet.getLastRow();\n      errorSheet.getRange(lastRow, 1).setNumberFormat('yyyy-MM-dd HH:mm:ss');\n\n      const severity = errorDetails.severity || 'low';\n      const bgColor = severity === 'high' ? '#F9BDBD' :\n                      severity === 'medium' ? '#FFE0B2' : '#E1F5FE';\n      errorSheet.getRange(lastRow, 1, 1, 4).setBackground(bgColor);\n    } catch (logError) {\n      console.error('Failed to log error to sheet:', logError);\n      console.error('Original error:', error.message, error.details);\n    }\n  }\n  /**\n   * Logs an error object to the Google Apps Script console.\n   * @param {Error|FinancialPlannerError} error - The error object to log.\n   * @private\n   */"}