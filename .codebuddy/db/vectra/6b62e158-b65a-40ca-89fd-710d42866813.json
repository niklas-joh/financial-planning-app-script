{"chunk":23,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"src/tests/cache-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"CacheService\", \"put should populate both caches\", function() {\n      setupTestState();\n      const key = \"put_key\";\n      const value = { item: \"value to put\" };\n      const namespacedKey = `fp_${key}`;\n\n      TestCacheService.put(key, value);\n\n      // Check memory cache\n      T.assertNotNull(TestCacheService._getMemoryCache()[namespacedKey], \"Memory cache should contain the key after put.\");\n      T.assertDeepEquals(value, TestCacheService._getMemoryCache()[namespacedKey].value, \"Memory cache value should match after put.\");\n      // Check script cache\n      T.assertNotNull(mockScriptCacheStore[namespacedKey], \"Script cache should contain the key after put.\");\n      T.assertEquals(JSON.stringify(value), mockScriptCacheStore[namespacedKey].value, \"Script cache value should match after put.\");\n  });\n   T.registerTest(\"CacheService\", \"put should not populate caches if disabled\", function() {\n      setupTestState();\n      mockCacheEnabled = false;\n      const key = \"put_disabled_key\";\n      const value = \"no cache put\";\n      const namespacedKey = `fp_${key}`;\n\n      TestCacheService.put(key, value);\n\n      T.assertTrue(TestCacheService._getMemoryCache()[namespacedKey] === undefined, \"Memory cache should be empty after put when disabled.\");\n      T.assertTrue(mockScriptCacheStore[namespacedKey] === undefined, \"Script cache should be empty after put when disabled.\");\n  });"}