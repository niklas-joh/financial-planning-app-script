{"chunk":10,"numChunks":25,"fileHash":"kS6Otb0ktf7SNGRgDc+bn8H5lrkmK9GeXCt+rLvCNP0=","filePath":"cline/clasp-pull/src/tests/settings-service.test.js","content":"/**\n(function() {\n  mockActiveSpreadsheet = {\n    sheets: {}, // Store mock sheets by name\n    getSheetByName: function(name) {\n      return this.sheets[name] || null;\n    },\n    insertSheet: function(name) {\n      if (this.sheets[name]) return this.sheets[name]; // Already exists\n      const newSheetData = [];\n      mockSheetData[name] = newSheetData;\n      const newSheet = Object.assign({}, mockSheet, { _name: name, _dataRef: newSheetData });\n      this.sheets[name] = newSheet;\n      return newSheet;\n    },\n    getActiveSpreadsheet: function() { return this; } // Return self\n  };\n  // Global mock\n  global.SpreadsheetApp = {\n    getActiveSpreadsheet: function() { return mockActiveSpreadsheet; },\n    // Add other SpreadsheetApp methods if needed by the service\n  };\n  // --- Mock Other Dependencies ---\n  const mockConfig = {\n    _settingsSheetName: \"Test Settings\",\n    getSheetNames: function() { return { SETTINGS: this._settingsSheetName }; },\n     getSection: function(section) { // Added for compatibility\n        if (section === 'SHEETS') return this.getSheetNames();\n        return {};\n    }\n  };"}