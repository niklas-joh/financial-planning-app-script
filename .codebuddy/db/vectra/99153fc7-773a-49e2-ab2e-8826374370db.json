{"chunk":7,"numChunks":20,"fileHash":"o9TH+WxWjuhYMssoSmFWfKxIkklvisnvxWTURfiVSIQ=","filePath":"src/services/monthly_spending_report.js","content":"/**\nFinancialPlanner.MonthlySpendingReport = (function(utils, uiService, errorService, config) {\n  function calculatePreviousMonthsAverage(\n    sheet, \n    data, \n    category, \n    subcategory, \n    dateColIndex, \n    typeColIndex, \n    categoryColIndex, \n    subcategoryColIndex,\n    amountColIndex, \n    monthsToLookBack\n  ) {\n    const now = new Date();\n    const currentMonth = now.getMonth();\n    const currentYear = now.getFullYear();\n    \n    let totalAmount = 0;\n    let monthsFound = 0;\n    \n    // Look back for the specified number of months\n    for (let i = 1; i <= monthsToLookBack; i++) {\n      let targetMonth = currentMonth - i;\n      let targetYear = currentYear;\n      \n      // Handle year change\n      if (targetMonth < 0) {\n        targetMonth += 12;\n        targetYear--;\n      }\n      \n      // Filter transactions for the target month\n      const monthlyTransactions = data.filter((row, index) => {\n        if (index === 0) return false; // Skip header\n        \n        const date = new Date(row[dateColIndex]);\n        return date.getMonth() === targetMonth && \n               date.getFullYear() === targetYear &&\n               row[categoryColIndex] === category &&\n               (row[subcategoryColIndex] || \"(None)\") === subcategory;\n      });\n      \n      // Sum amounts for this month\n      let monthTotal = 0;\n      monthlyTransactions.forEach(row => {\n        const amount = Math.abs(parseFloat(row[amountColIndex]) || 0);\n        monthTotal += amount;\n      });\n      \n      if (monthlyTransactions.length > 0) {\n        totalAmount += monthTotal;\n        monthsFound++;\n      }\n    }\n    \n    // Return average or 0 if no data found\n    return monthsFound > 0 ? totalAmount"}