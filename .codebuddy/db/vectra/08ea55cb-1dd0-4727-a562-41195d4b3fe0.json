{"chunk":34,"numChunks":35,"fileHash":"KnGRZfWKIc39Wbh8b5JI+OtSMVtmab0GI6OHguWwGLg=","filePath":"src/features/financial-analysis/financial_analysis.js","content":"/**\nFinancialPlanner.FinancialAnalysisService = (function(\n) {\n  class FinancialAnalysisService {\n    buildExpenseAnalysis(metrics) {\n      const totalRow = this.builder.getCurrentRow() + categoryData.length;\n      categoryData.push([\n        'Total Expenses',\n        'All',\n        metrics.expenses.average,\n        '', // Will be replaced by formula\n        0.8,\n        ''  // Will be replaced by formula\n      ]);\n      varianceFormulas.push({\n        row: totalRow,\n        percentFormula: `=IFERROR(C${totalRow}/${metrics.income.averageRef},0)`,\n        varianceFormula: `=D${totalRow}-E${totalRow}`\n      });\n      // Add the data\n      this.builder.addDataRows(categoryData);\n      // Apply formulas\n      varianceFormulas.forEach(vf => {\n        this.builder.sheet.getRange(vf.row, 4).setFormula(vf.percentFormula);\n        this.builder.sheet.getRange(vf.row, 6).setFormula(vf.varianceFormula);\n      });\n      // Format the ranges\n      const dataRange = this.builder.sheet.getRange(\n        this.builder.getCurrentRow() - categoryData.length,\n        1,\n        categoryData.length,\n        6\n      );\n      // Apply currency format to amount column\n      utils.formatAsCurrency(\n        dataRange.offset(0, 2, categoryData.length, 1),\n        config.getLocale().NUMBER_FORMATS.CURRENCY_DEFAULT\n      );\n      // Apply percentage format to columns D, E, F\n      utils.formatAsPercentage(\n        dataRange.offset(0, 3, categoryData.length, 3)\n      );\n      // Add conditional formatting for variance\n      const rules = [];"}