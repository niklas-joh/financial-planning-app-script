{"chunk":4,"numChunks":36,"fileHash":"5PxeaT4n9kgvALpAj5B1jgQlallPIdU12UlI5e4vOJw=","filePath":"src/services/finance_overview.js","content":"/**\nFinancialPlanner.FinanceOverview = (function(utils, uiService, cacheService, errorService, config, settingsService, analysisServiceInstance) {\n  // ============================================================================\n  // PRIVATE IMPLEMENTATION\n  // ============================================================================\n  function getProcessedTransactionData(sheet) {\n    const rawData = sheet.getDataRange().getValues();\n    const headers = rawData[0];\n    const indices = {\n      type: headers.indexOf(\"Type\"), category: headers.indexOf(\"Category\"),\n      subcategory: headers.indexOf(\"Sub-Category\"), date: headers.indexOf(\"Date\"),\n      amount: headers.indexOf(\"Amount\"), shared: headers.indexOf(\"Shared\")\n    };\n    const requiredColumns = [\"type\", \"category\", \"subcategory\", \"date\", \"amount\"];\n    const missingColumns = requiredColumns.filter(col => indices[col] < 0);\n    if (missingColumns.length > 0) {\n      throw errorService.create(`Required columns not found: ${missingColumns.join(\", \")}`, { severity: \"high\", headers });\n    }\n    return { data: rawData, indices };\n  }\n  function getUniqueCategoryCombinations(data, typeCol, categoryCol, subcategoryCol, showSubCategories) {\n    const seen = new Set();\n    return data.slice(1).reduce((combinations, row) => {\n      const type = row[typeCol]; const category = row[categoryCol];\n      const subcategory = showSubCategories ? row[subcategoryCol] : \"\";\n      if (!type || !category) return combinations;\n      const key = `${type}|${category}|${subcategory || \"\"}`;\n      if (!seen.has(key)) {\n        seen.add(key);\n        combinations.push({ type, category, subcategory: subcategory || \"\" });\n      }\n      return combinations;\n    }, []);\n  }"}