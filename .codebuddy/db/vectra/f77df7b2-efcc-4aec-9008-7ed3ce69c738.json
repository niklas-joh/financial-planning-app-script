{"chunk":21,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"cline/clasp-pull/src/tests/cache-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"CacheService\", \"get should recompute if memory cache expired\", function() {\n    setupTestState();\n    let computeCount = 0;\n    const key = \"mem_expired_key\";\n    const initialValue = \"expired value\";\n    const newValue = \"newly computed\";\n    const computeFunc = () => { computeCount++; return newValue; };\n    const namespacedKey = `fp_${key}`;\n\n    // Pre-populate memory cache with expired item\n    TestCacheService._getMemoryCache()[namespacedKey] = { value: initialValue, expiry: Date.now() - 10000 }; // Expired 10s ago\n\n    const result = TestCacheService.get(key, computeFunc);\n\n    T.assertEquals(1, computeCount, \"Compute function should be called once when memory cache expired.\");\n    T.assertEquals(newValue, result, \"Should return the newly computed value.\");\n  });\n   T.registerTest(\"CacheService\", \"get should recompute if script cache expired\", function() {\n    setupTestState();\n    let computeCount = 0;\n    const key = \"script_expired_key\";\n    const initialValue = \"expired script value\";\n    const newValue = \"newly computed again\";\n    const computeFunc = () => { computeCount++; return newValue; };\n    const namespacedKey = `fp_${key}`;\n\n    // Pre-populate script cache with expired item\n    mockScriptCacheStore[namespacedKey] = { value: JSON.stringify(initialValue), expiry: Date.now() - 10000 }; // Expired\n     // Ensure memory cache is empty\n     delete TestCacheService._getMemoryCache()[namespacedKey];\n\n    const result = TestCacheService.get(key, computeFunc);\n\n    T.assertEquals(1, computeCount, \"Compute function should be called once when script cache expired.\");\n    T.assertEquals(newValue, result, \"Should return the newly computed value.\");\n  });"}