{"chunk":3,"numChunks":7,"fileHash":"iFMCzK+BUnwG2LEFTpjh3lrg0ZQFUNXmEqEtoksiVpw=","filePath":"cline/development_workflow_guide.md","content":"    # The -c flag checks out the new branch.\n    ```\n    *(Cline: This is the preferred way to create branches for issues.)*\n\n### C. Creating Pull Requests\n*   **Create a PR for the current branch:**\n    ```bash\n    gh pr create --title \"feat(scope): Implement user login\" --body \"Resolves #ISSUE_NUMBER. This PR introduces the user login functionality...\" --reviewer \"username\" --label \"status:needs-review\"\n    ```\n    *(Cline: Ensure the PR title follows conventional commit summary style and the body links the issue.)*\n\n### D. Other Useful `gh` Commands\n*   **View PRs:** `gh pr list`, `gh pr view PR_NUMBER`\n*   **Checkout PR:** `gh pr checkout PR_NUMBER`\n*   **Merge PR (after approval):** `gh pr merge PR_NUMBER --squash` (or other merge methods like `--rebase`, `--merge`)\n\n## III. Cline's Iterative Development Workflow (Standard Operating Procedure)\n\nThis is the step-by-step process Cline will follow for development tasks:\n\n1.  **Understand the Task & Plan:**\n    *   Thoroughly analyze the user's request.\n    *   If in PLAN MODE, discuss and refine the plan with the user.\n    *   Break down the task into smaller, manageable sub-tasks.\n\n2.  **Create GitHub Issue (If applicable):**\n    *   **Cline Action:** Create a detailed markdown file (e.g., `cline/issue_body.md`) describing the feature/bug, proposed changes, and acceptance criteria.\n    *   **Cline Action:** Use `gh issue create --title \"Type(Scope): Short description of issue\" --body-file cline/issue_body.md --label \"relevant-label1,relevant-label2\"` to create the issue.\n    *   **Cline Action:** Note the created issue number.\n"}