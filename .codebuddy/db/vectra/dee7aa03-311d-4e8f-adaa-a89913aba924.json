{"chunk":18,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"cline/clasp-pull/src/tests/cache-service.test.js","content":"/**\n(function() {\n  function setupTestState() {\n      mockScriptCacheStore = {};\n      // Reset the internal memory cache of the TestCacheService instance\n      TestCacheService.invalidateAll(); // This should clear its internal memory cache\n      scriptCacheGetError = null;\n      scriptCachePutError = null;\n      scriptCacheRemoveError = null;\n      scriptCacheRemoveAllError = null;\n      jsonParseError = null;\n      jsonStringifyError = null;\n      mockCacheEnabled = true; // Default to enabled\n  }\n  // --- Test Cases ---\n  T.registerTest(\"CacheService\", \"get should compute value on cache miss\", function() {\n    setupTestState();\n    let computeCount = 0;\n    const key = \"miss_key\";\n    const expectedValue = { data: \"computed\" };\n    const computeFunc = () => { computeCount++; return expectedValue; };\n\n    const result = TestCacheService.get(key, computeFunc);\n\n    T.assertEquals(1, computeCount, \"Compute function should be called once on miss.\");\n    T.assertDeepEquals(expectedValue, result, \"Should return the computed value.\");\n    // Check script cache was populated\n    const namespacedKey = `fp_${key}`;\n    T.assertNotNull(mockScriptCacheStore[namespacedKey], \"Script cache should contain the key.\");\n    T.assertEquals(JSON.stringify(expectedValue), mockScriptCacheStore[namespacedKey].value, \"Script cache should contain the stringified value.\");\n     // Check memory cache was populated\n    T.assertNotNull(TestCacheService._getMemoryCache()[namespacedKey], \"Memory cache should contain the key.\");\n    T.assertDeepEquals(expectedValue, TestCacheService._getMemoryCache()[namespacedKey].value, \"Memory cache should contain the original value.\");\n  });"}