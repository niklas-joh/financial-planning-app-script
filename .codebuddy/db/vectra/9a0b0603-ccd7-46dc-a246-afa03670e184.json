{"chunk":10,"numChunks":11,"fileHash":"XFJnApqdW9F2W7KmE+N70wOSQSD9mzs9GMDBzeBLKO8=","filePath":"cline/clasp-pull/src/tests/testing-framework.js","content":"/**\nFinancialPlanner.Testing = (function() {\n  return {\n    assertThrows: function(func, expectedError, message) {\n      let caughtError = false;\n      try {\n        func();\n      } catch (error) {\n        caughtError = true;\n        if (expectedError) {\n          if (typeof expectedError === 'string' && !error.message.includes(expectedError)) {\n            throw new Error(message || `Assertion Failed: Expected error message to include \"${expectedError}\", but got \"${error.message}\".`);\n          } else if (expectedError instanceof RegExp && !expectedError.test(error.message)) {\n            throw new Error(message || `Assertion Failed: Expected error message to match RegExp \"${expectedError}\", but got \"${error.message}\".`);\n          }\n        }\n      }\n      if (!caughtError) {\n        throw new Error(message || \"Assertion Failed: Expected function to throw an error, but it did not.\");\n      }\n    },\n    /**\n     * Asserts that a value is not null or undefined.\n     * @param {*} actual - The value to test.\n     * @param {string} [message] - Optional message to display on failure.\n     */\n    assertNotNull: function(actual, message) {\n      if (actual === null || actual === undefined) {\n        const defaultMessage = `Assertion Failed: Expected value to be not null/undefined, but it was ${actual}.`;\n        throw new Error(message || defaultMessage);\n      }\n    },\n    /**\n     * Asserts that two objects are deeply equal.\n     * Note: This is a simple implementation. For complex objects or specific needs, a more robust deep equal library might be better.\n     * @param {Object} expected - The expected object.\n     * @param {Object} actual - The actual object.\n     * @param {string} [message] - Optional message to display on failure.\n     */"}