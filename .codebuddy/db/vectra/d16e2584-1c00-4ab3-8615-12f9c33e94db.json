{"chunk":3,"numChunks":10,"fileHash":"qKty2YPjJfk9NdZZT+Kl8Aescdwa/V3Jg8MhLZ7cQWs=","filePath":"src/tests/ui-service.test.js","content":"/**\n(function() {\n  // Alias for easier access\n  const T = FinancialPlanner.Testing;\n  const UIService = FinancialPlanner.UIService;\n  // --- Mock Dependencies & Globals ---\n  let lastToast = null;\n  let lastAlert = null;\n  let lastPrompt = null;\n  let lastSidebar = null;\n  let lastModal = null;\n  let alertResponse = null; // Control mock alert response\n  let promptResponse = null; // Control mock prompt response { button: Button, text: string }\n  const mockUi = {\n    Button: { OK: 'OK', CANCEL: 'CANCEL', CLOSE: 'CLOSE' }, // Enum simulation\n    ButtonSet: { OK: 'OK', OK_CANCEL: 'OK_CANCEL', YES_NO: 'YES_NO' }, // Enum simulation\n    alert: function(title, message, buttons) {\n      lastAlert = { title: title, message: message, buttons: buttons };\n      return alertResponse || this.Button.OK; // Default response\n    },\n    prompt: function(title, message, buttons) {\n       lastPrompt = { title: title, message: message, buttons: buttons };\n       return {\n           getSelectedButton: function() { return promptResponse ? promptResponse.button : mockUi.Button.CANCEL; },\n           getResponseText: function() { return promptResponse ? promptResponse.text : null; }\n       };\n    },\n    showSidebar: function(htmlOutput) {\n        lastSidebar = { title: htmlOutput._title, content: htmlOutput._content, width: htmlOutput._width };\n    },\n    showModalDialog: function(htmlOutput, title) {\n         lastModal = { title: title, content: htmlOutput._content, width: htmlOutput._width, height: htmlOutput._height };\n    }\n  };"}