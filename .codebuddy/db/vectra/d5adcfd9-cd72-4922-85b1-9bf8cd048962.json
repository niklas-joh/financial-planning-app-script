{"chunk":7,"numChunks":13,"fileHash":"FPWMpHmLZKu4rtU3UJKiqtFhACvzN0astec1eIzBF5E=","filePath":"src/services/data_processor.js","content":"/**\nconst DataProcessorModule = (function() {\n  class DataProcessor {\n    constructor(data, columnIndices, config, errorService) {\n      this.data = data;\n      this.indices = columnIndices;\n      this.config = config;\n      this.errorService = errorService;\n      this.headers = data[0];\n    }\n    /**\n     * Extracts unique category combinations\n     */\n    getUniqueCombinations(showSubCategories) {\n      const seen = new Set();\n      const combinations = [];\n      \n      for (let i = 1; i < this.data.length; i++) {\n        const row = this.data[i];\n        const type = row[this.indices.type];\n        const category = row[this.indices.category];\n        const subcategory = showSubCategories ? row[this.indices.subcategory] : '';\n        \n        if (!type || !category) continue;\n        \n        const key = `${type}|${category}|${subcategory}`;\n        if (!seen.has(key)) {\n          seen.add(key);\n          combinations.push({\n            type,\n            category,\n            subcategory: subcategory || ''\n          });\n        }\n      }\n      \n      return combinations;\n    }\n    /**\n     * Groups combinations by type\n     */\n    groupByType(combinations) {\n      const grouped = {};\n      \n      combinations.forEach(combo => {\n        if (!grouped[combo.type]) {\n          grouped[combo.type] = [];\n        }\n        grouped[combo.type].push(combo);\n      });\n      \n      // Sort within each group\n      Object.keys(grouped).forEach(type => {\n        grouped[type].sort((a, b) => {\n          const catCompare = a.category.localeCompare(b.category);\n          if (catCompare !== 0) return catCompare;\n          return (a.subcategory || '').localeCompare(b.subcategory || '');\n        });\n      });\n      \n      return grouped;\n    }\n    /**\n     * Filters transactions by date range\n     */"}