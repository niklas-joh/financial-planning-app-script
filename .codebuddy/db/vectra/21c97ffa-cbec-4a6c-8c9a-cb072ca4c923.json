{"chunk":7,"numChunks":12,"fileHash":"oo4KQG371O2oQazQ1GQ5P0wR6aYzUfQT4MWUnek5PHA=","filePath":"src/services/sheet-builder.js","content":"/**\nconst SheetBuilderModule = (function() {\n  class SheetBuilder {\n    constructor(sheet, config, utils) {\n      this.sheet = sheet;\n      this.config = config;\n      this.utils = utils;\n      this.currentRow = 1;\n      this.operations = [];\n    }\n    /**\n     * Clears the sheet and resets formatting\n     */\n    clear() {\n      this.sheet.clear();\n      this.sheet.clearFormats();\n      this.sheet.getRange(\"A1:Z1000\").setDataValidation(null);\n      return this;\n    }\n    /**\n     * Adds a header row with formatting\n     */\n    addHeaderRow(headers, formatting = {}) {\n      const range = this.sheet.getRange(this.currentRow, 1, 1, headers.length);\n      range.setValues([headers]);\n      \n      this._applyFormatting(range, formatting);\n      this.currentRow++;\n      return this;\n    }\n    /**\n     * Adds a section header\n     */\n    addSectionHeader(title, formatting = {}) {\n      const range = this.sheet.getRange(this.currentRow, 1);\n      range.setValue(title);\n      \n      if (formatting.merge) {\n        const mergeRange = this.sheet.getRange(this.currentRow, 1, 1, formatting.merge);\n        mergeRange.merge();\n      }\n      \n      this._applyFormatting(range, formatting);\n      this.currentRow++;\n      return this;\n    }\n    /**\n     * Adds data rows with optional formulas\n     */"}