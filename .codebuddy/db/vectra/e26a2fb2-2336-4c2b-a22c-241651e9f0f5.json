{"chunk":18,"numChunks":25,"fileHash":"kS6Otb0ktf7SNGRgDc+bn8H5lrkmK9GeXCt+rLvCNP0=","filePath":"cline/clasp-pull/src/tests/settings-service.test.js","content":"/**\n(function() {\n   const TestSettingsService = (function(config, utils, uiService, errorService) {\n        return {\n            getValue: function(key, defaultValue) {\n                try {\n                    const preference = findPreference(key);\n                    return preference ? preference.value : defaultValue;\n                } catch (error) {\n                    errorService.handle(errorService.create(`Error getting setting value for key: ${key}`, { originalError: error.toString() }), `Failed to get setting: ${key}`);\n                    return defaultValue;\n                }\n            },\n            setValue: function(key, value) {\n                try {\n                    const sheet = getSettingsSheet();\n                    const preference = findPreference(key);\n                    if (preference) {\n                    sheet.getRange(preference.row, 2).setValue(value);\n                    } else {\n                    const lastRow = Math.max(1, sheet.getLastRow());\n                    sheet.getRange(lastRow + 1, 1, 1, 2).setValues([[key, value]]);\n                    }\n                } catch (error) {\n                    errorService.handle(errorService.create(`Error setting setting value for key: ${key}`, { originalError: error.toString(), valueToSet: value }), `Failed to set setting: ${key}`);\n                }\n            },\n             getBooleanValue: function(key, defaultValue) {\n                const value = this.getValue(key, defaultValue);\n                if (typeof value === 'boolean') return value;\n                if (value === 'true' || value === 1 || value === '1') return true;\n                if (value === 'false' || value === 0 || value === '0') return false;\n                return !!defaultValue;\n            },\n            getNumericValue: function(key, defaultValue) {\n                const value = this.getValue(key, defaultValue);\n                if (typeof value === 'number') return value;\n                const parsed = parseFloat(value);\n                return isNaN(parsed) ? (typeof defaultValue === 'number' ? defaultValue : 0) : parsed;\n            },"}