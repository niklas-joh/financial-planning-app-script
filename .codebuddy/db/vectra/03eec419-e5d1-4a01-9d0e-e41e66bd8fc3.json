{"chunk":9,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"src/tests/dropdowns.test.js","content":"/**\n(function() {\n  const mockSheet = {\n    _name: null, _dataRef: null, _frozenRows: 0,\n    getName: function() { return this._name; },\n    getDataRange: function() { /* ... simplified ... */\n        const numRows = this._dataRef.length;\n        const numCols = numRows > 0 ? this._dataRef[0].length : 0;\n        return Object.assign({}, mockRange, { _sheetName: this._name, _row: 1, _col: 1, _numRows: numRows, _numCols: numCols, _sheetDataRef: this._dataRef });\n    },\n    getRange: function(row, col, numRows = 1, numCols = 1) { /* ... simplified ... */\n         while(this._dataRef.length < row + numRows -1) this._dataRef.push([]);\n         const maxCols = col + numCols -1;\n         this._dataRef.forEach(r => { while(r.length < maxCols) r.push(\"\"); });\n         return Object.assign({}, mockRange, { _sheetName: this._name, _row: row, _col: col, _numRows: numRows, _numCols: numCols, _sheetDataRef: this._dataRef });\n    },\n    getLastRow: function() { return this._dataRef.length; },\n    getFrozenRows: function() { return this._frozenRows; }\n    // Add other methods if needed\n  };\n  const mockDataValidation = { _values: [], _allowInvalid: true };"}