{"chunk":4,"numChunks":11,"fileHash":"XFJnApqdW9F2W7KmE+N70wOSQSD9mzs9GMDBzeBLKO8=","filePath":"src/tests/testing-framework.js","content":"/**\nFinancialPlanner.Testing = (function() {\n  const tests = {}; // { moduleName: { testName: testFunction } }\n  const results = {\n    passed: 0,\n    failed: 0,\n    skipped: 0, // For future use\n    details: [] // { module: string, test: string, status: 'passed'|'failed'|'skipped', message?: string, error?: Error }\n  };\n  /**\n   * Resets the test results.\n   * @private\n   */\n  function resetResults_() {\n    results.passed = 0;\n    results.failed = 0;\n    results.skipped = 0;\n    results.details = [];\n  }\n  /**\n   * Logs a test result.\n   * @param {string} moduleName - The name of the module being tested.\n   * @param {string} testName - The name of the test.\n   * @param {'passed'|'failed'|'skipped'} status - The status of the test.\n   * @param {string} [message] - An optional message.\n   * @param {Error} [error] - An optional error object for failed tests.\n   * @private\n   */\n  function logResult_(moduleName, testName, status, message, error) {\n    results.details.push({\n      module: moduleName,\n      test: testName,\n      status: status,\n      message: message,\n      error: error ? { name: error.name, message: error.message, stack: error.stack } : undefined\n    });\n    if (status === 'passed') {\n      results.passed++;\n    } else if (status === 'failed') {\n      results.failed++;\n    } else if (status === 'skipped') {\n      results.skipped++;\n    }\n  }\n  // Public API"}