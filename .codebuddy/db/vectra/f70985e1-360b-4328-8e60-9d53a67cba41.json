{"chunk":7,"numChunks":53,"fileHash":"sZNtFtlzBgOlJ3052pxcb3tYBWiJBgfxmxjkXMyDhtg=","filePath":"cline/clasp-pull/src/services/finance_overview.js","content":"/**\nFinancialPlanner.FinanceOverview = (function(utils, uiService, cacheService, errorService, config, settingsService, analysisServiceInstance) { // Added settingsService and analysisServiceInstance\n  function getUniqueCategoryCombinations(data, typeCol, categoryCol, subcategoryCol, showSubCategories) {\n    // Use a Set to track unique combinations\n    const seen = new Set();\n    \n    // Process all rows except header (more efficient than filter + map)\n    return data.slice(1)\n      // Skip empty rows with reduce instead of multiple filter calls\n      .reduce((combinations, row) => {\n        const type = row[typeCol];\n        const category = row[categoryCol];\n        const subcategory = showSubCategories ? row[subcategoryCol] : \"\";\n        \n        if (!type || !category) return combinations;\n        \n        const key = `${type}|${category}|${subcategory || \"\"}`;\n        \n        if (!seen.has(key)) {\n          seen.add(key);\n          combinations.push({\n            type: type,\n            category: category,\n            subcategory: subcategory || \"\"\n          });\n        }\n        \n        return combinations;\n      }, []);\n  }\n  /**\n   * Groups an array of category combinations by their 'type' property.\n   * Within each type, combinations are sorted alphabetically by category, then by sub-category.\n   * @param {Array<{type: string, category: string, subcategory: string}>} combinations - An array of category combination objects.\n   * @return {object<string, Array<{type: string, category: string, subcategory: string}>>} An object where keys are transaction types\n   *         and values are arrays of sorted combination objects belonging to that type.\n   * @private\n   */"}