{"chunk":14,"numChunks":15,"fileHash":"WF/+BE1W5ThwGtH1c6mstkQ0iFCyZ7d4PHM8NSeT2kI=","filePath":"src/tests/error-service.test.js","content":"/**\n(function() {\n   T.registerTest(\"ErrorService\", \"handle should use error message if user message not provided\", function() {\n    lastErrorNotification = null; // Reset mock tracker\n    const error = TestErrorService.create(\"Error message only\");\n\n    try {\n      TestErrorService.handle(error); // No userFriendlyMessage\n      // Check if UI service was called\n      T.assertNotNull(lastErrorNotification, \"uiService.showErrorNotification should have been called.\");\n      T.assertEquals(\"Error\", lastErrorNotification.title, \"Notification title should be 'Error'.\");\n      T.assertEquals(error.message, lastErrorNotification.message, \"Notification message should default to error.message.\");\n    } catch (e) {\n       T.assertTrue(false, `handle() should not have thrown an error, but threw: ${e.message}`);\n    }\n  });\n  T.registerTest(\"ErrorService\", \"wrap should execute function normally if no error\", function() {\n    lastErrorNotification = null;\n    let executed = false;\n    const wrappedFunc = TestErrorService.wrap(function(a, b) {\n      executed = true;\n      return a + b;\n    }, \"Wrapper test failed\");\n\n    const result = wrappedFunc(5, 3);\n    T.assertTrue(executed, \"Wrapped function should have been executed.\");\n    T.assertEquals(8, result, \"Wrapped function should return the correct result.\");\n    T.assertTrue(lastErrorNotification === null, \"showErrorNotification should not have been called.\");\n  });"}