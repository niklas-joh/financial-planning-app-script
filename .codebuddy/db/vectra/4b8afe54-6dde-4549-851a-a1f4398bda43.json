{"chunk":5,"numChunks":10,"fileHash":"thLzGKf8T/btOkfqw176f6fXD2ScoI1kOQvC+iYpiNw=","filePath":"cline/clasp-pull/src/core/error-service.js","content":"/**\nFinancialPlanner.ErrorService = (function(config, uiService) {\n  function logToSheet(error) {\n    try {\n      const ss = SpreadsheetApp.getActiveSpreadsheet();\n      const errorSheet = FinancialPlanner.Utils.getOrCreateSheet(ss, config.getSheetNames().ERROR_LOG);\n      \n      // Create headers if this is a new sheet\n      if (errorSheet.getLastRow() === 0) {\n        errorSheet.appendRow([\"Timestamp\", \"Error Type\", \"Message\", \"Details\"]);\n        errorSheet.getRange(1, 1, 1, 4).setFontWeight(\"bold\");\n      }\n      \n      // Format error details for logging\n      const errorDetails = error.details || {};\n      const formattedDetails = JSON.stringify(errorDetails);\n      \n      // Append error information\n      errorSheet.appendRow([\n        error.timestamp || new Date(), \n        error.name || \"Error\", \n        error.message, \n        formattedDetails\n      ]);\n      \n      // Format the timestamp\n      const lastRow = errorSheet.getLastRow();\n      errorSheet.getRange(lastRow, 1).setNumberFormat(\"yyyy-MM-dd HH:mm:ss\");\n      \n      // Set colors based on error severity\n      const severity = errorDetails.severity || \"low\";\n      const bgColor = severity === \"high\" ? \"#F9BDBD\" : \n                      severity === \"medium\" ? \"#FFE0B2\" : \"#E1F5FE\";\n      errorSheet.getRange(lastRow, 1, 1, 4).setBackground(bgColor);\n    } catch (logError) {\n      // If we can't log to sheet, at least log to console\n      console.error(\"Failed to log error to sheet:\", logError);\n      console.error(\"Original error:\", error.message, error.details);\n    }\n  }"}