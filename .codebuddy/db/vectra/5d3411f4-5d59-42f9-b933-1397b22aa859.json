{"chunk":13,"numChunks":14,"fileHash":"m+ILWFttSzMQvZs28WTEsXBRFJ7fzh2IK0bjpCXfnaI=","filePath":"cline/clasp-pull/src/core/cache-service.js","content":"/**\nFinancialPlanner.CacheService = (function(config) {\n  return {\n    invalidateAll: function() {\n      if (!isCacheEnabled()) return;\n      \n      // Clear memory cache\n      Object.keys(memoryCache).forEach(key => {\n        delete memoryCache[key];\n      });\n      \n      // Clear script cache for known keys\n      try {\n        const cache = CacheService.getScriptCache();\n        const keys = Object.values(config.getSection('CACHE').KEYS || {})\n          .map(key => generateNamespacedKey(key));\n        \n        if (keys.length > 0) {\n          cache.removeAll(keys);\n        }\n      } catch (error) {\n        console.warn(\"Failed to invalidate all cache entries:\", error);\n      }\n    },\n    /**\n     * Puts a value directly into the cache (both memory and script cache).\n     * If caching is disabled, this operation does nothing.\n     *\n     * @param {string} key The unique key for the cache entry.\n     * @param {any} value The value to cache. Must be serializable to JSON for script cache.\n     * @param {number} [expirySeconds] The number of seconds for which the item should be cached.\n     *                                 Defaults to the value from `config.getSection('CACHE').EXPIRY_SECONDS` or 3600.\n     *\n     * @example\n     * FinancialPlanner.CacheService.put('userPreferences', { theme: 'dark', notifications: true }, 86400); // Cache for 1 day\n     */"}