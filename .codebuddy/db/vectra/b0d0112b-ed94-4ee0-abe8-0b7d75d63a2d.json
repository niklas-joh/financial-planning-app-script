{"chunk":5,"numChunks":53,"fileHash":"sZNtFtlzBgOlJ3052pxcb3tYBWiJBgfxmxjkXMyDhtg=","filePath":"cline/clasp-verify/src/services/finance_overview.js","content":"/**\nFinancialPlanner.FinanceOverview = (function(utils, uiService, cacheService, errorService, config, settingsService, analysisServiceInstance) { // Added settingsService and analysisServiceInstance\n  function getProcessedTransactionData(sheet) {\n    const rawData = sheet.getDataRange().getValues();\n    const headers = rawData[0];\n    \n    // Find column indices\n    const indices = {\n      type: headers.indexOf(\"Type\"),\n      category: headers.indexOf(\"Category\"),\n      subcategory: headers.indexOf(\"Sub-Category\"),\n      date: headers.indexOf(\"Date\"),\n      amount: headers.indexOf(\"Amount\"),\n      shared: headers.indexOf(\"Shared\")\n    };\n    \n    // Validate required columns exist\n    const requiredColumns = [\"type\", \"category\", \"subcategory\", \"date\", \"amount\"];\n    const missingColumns = requiredColumns.filter(col => indices[col] < 0);\n    \n    if (missingColumns.length > 0) {\n      throw errorService.create(\n        `Required columns not found: ${missingColumns.join(\", \")}`,\n        { severity: \"high\", headers }\n      );\n    }\n    \n    return { data: rawData, indices };\n  }\n  /**\n   * Extracts unique combinations of Type, Category, and optionally Sub-Category from the transaction data.\n   * @param {Array<Array<any>>} data - The raw transaction data (2D array, rows as arrays).\n   * @param {number} typeCol - The 0-based column index for the transaction type.\n   * @param {number} categoryCol - The 0-based column index for the category.\n   * @param {number} subcategoryCol - The 0-based column index for the sub-category.\n   * @param {boolean} showSubCategories - If true, sub-categories are included in the combination.\n   * @return {Array<{type: string, category: string, subcategory: string}>} An array of objects,\n   *         each representing a"}