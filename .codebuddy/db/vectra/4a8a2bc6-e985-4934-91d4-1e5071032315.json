{"chunk":22,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"cline/clasp-pull/src/tests/dropdowns.test.js","content":"/**\n(function() {\n  T.registerTest(\"DropdownService\", \"initializeCache should build cache if empty\", function() {\n      setupMockSheets();\n      // Ensure internal cache is null initially (refreshCache sets it, so we manually nullify for this test)\n      TestDropdownService.dropdownCache = null; // Accessing internal state for test setup\n      mockScriptCacheStore = {}; // Ensure script cache is also empty\n\n      TestDropdownService.initializeCache();\n      // Check internal cache (indirectly, by seeing if handleEdit works without rebuild)\n      const mockEvent = {\n          range: mockActiveSpreadsheet.getSheetByName(\"Transactions\").getRange(2, 3), // Edit Type in R2\n          source: mockActiveSpreadsheet\n      };\n      // If initializeCache worked, handleEdit shouldn't call buildDropdownCache again (check logs or add counter if needed)\n      TestDropdownService.handleEdit(mockEvent);\n      // Basic check: did it run without error?\n      T.assertTrue(lastHandledError === null, \"initializeCache followed by handleEdit should not cause errors.\");\n  });"}