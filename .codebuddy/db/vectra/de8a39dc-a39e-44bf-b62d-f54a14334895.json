{"chunk":10,"numChunks":31,"fileHash":"p7QjnH7owYj6gI9sV03tmQN28z3j87qqpbMEZWUm4gw=","filePath":"cline/clasp-pull/src/tests/dropdowns.test.js","content":"/**\n(function() {\n  const mockDataValidationBuilder = {\n      requireValueInList: function(values, showDropdown) { mockDataValidation._values = values; return this; },\n      setAllowInvalid: function(allow) { mockDataValidation._allowInvalid = allow; return this; },\n      build: function() { return Object.assign({}, mockDataValidation); } // Return a copy\n  };\n  mockActiveSpreadsheet = {\n    sheets: {},\n    getSheetByName: function(name) { return this.sheets[name] || null; },\n    insertSheet: function(name) { /* ... simplified ... */\n        if (this.sheets[name]) return this.sheets[name];\n        const newSheetData = []; mockSheetData[name] = newSheetData;\n        const newSheet = Object.assign({}, mockSheet, { _name: name, _dataRef: newSheetData });\n        this.sheets[name] = newSheet; return newSheet;\n    },\n    toast: function(message, title, timeout) { lastToast = { message, title, timeout }; }\n  };\n  // Global mocks\n  global.SpreadsheetApp = {\n    getActiveSpreadsheet: function() { return mockActiveSpreadsheet; },\n    newDataValidation: function() { return Object.assign({}, mockDataValidationBuilder); } // Return new builder instance\n  };\n  global.CacheService = {\n    getScriptCache: function() {\n        return {\n            get: function(key){ return mockScriptCacheStore[key] || null; },\n            put: function(key, value, ttl){ mockScriptCacheStore[key] = value; }, // Simplified put\n            remove: function(key){ delete mockScriptCacheStore[key]; }\n        };\n    }\n  };\n  global.Logger = { log: function(msg) { console.log(\"Logger.log:\", msg); } }; // Basic Logger mock"}