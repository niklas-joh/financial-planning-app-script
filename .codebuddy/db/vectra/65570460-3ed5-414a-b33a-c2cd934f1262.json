{"chunk":1,"numChunks":7,"fileHash":"iFMCzK+BUnwG2LEFTpjh3lrg0ZQFUNXmEqEtoksiVpw=","filePath":"cline/development_workflow_guide.md","content":"        *   `style`: Code style changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.).\n        *   `refactor`: A code change that neither fixes a bug nor adds a feature.\n        *   `perf`: A code change that improves performance.\n        *   `test`: Adding missing tests or correcting existing ones.\n        *   `build`: Changes that affect the build system or external dependencies (e.g., Gulp, Webpack, NPM).\n        *   `ci`: Changes to CI configuration files and scripts.\n        *   `chore`: Other changes that don't modify `src` or `test` files (e.g., updating grunt tasks).\n    *   **Scope (Optional):** The scope can be anything specifying the place of the commit change (e.g., `analysis`, `ui`, `config`).\n    *   **Summary:** Concise (under 72 characters), imperative mood (e.g., \"Add login button,\" not \"Added login button\" or \"Adds login button\").\n    *   **Body:** Explain the *what* and *why* vs. *how*.\n    *   **Footer:** Reference related issues using keywords like `Fixes #<issue-number>`, `Resolves #<issue-number>`.\n\n### C. Pull Request (PR) Workflow\n1.  **Descriptive PRs:**\n    *   Clear title summarizing the changes.\n    *   Detailed body explaining the purpose, changes made, and how to test. Link to the issue it resolves.\n2.  **Focused PRs:** Keep PRs focused on a single issue or feature. Large changes should be broken down.\n3.  **Request Reviews:** Always request reviews from relevant team members.\n4.  **Address Feedback:** Promptly address any review comments or questions.\n"}