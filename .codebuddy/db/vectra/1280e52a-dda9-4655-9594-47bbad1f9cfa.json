{"chunk":5,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"cline/clasp-pull/src/tests/cache-service.test.js","content":"/**\n(function() {\n  const originalJSONStringify = JSON.stringify;\n  global.JSON.parse = function(text) {\n      if (jsonParseError) throw jsonParseError;\n      return originalJSONParse(text);\n  };\n   global.JSON.stringify = function(value) {\n      if (jsonStringifyError) throw jsonStringifyError;\n      return originalJSONStringify(value);\n  };\n  // Mock Config dependency\n  let mockCacheEnabled = true;\n  const mockConfig = {\n      _cacheSettings: {\n          ENABLED: true,\n          EXPIRY_SECONDS: 600, // 10 minutes default for tests\n          KEYS: {\n              KEY1: \"test_key_1\",\n              KEY2: \"test_key_2\"\n          }\n      },\n      getSection: function(section) {\n          if (section === 'CACHE') {\n              // Return a copy to prevent tests modifying the mock config directly\n              const settings = { ...this._cacheSettings };\n              settings.ENABLED = mockCacheEnabled; // Use the controllable flag\n              return settings;\n          }\n          return {};\n      },\n      // Add get() if CacheService uses it directly\n      get: function() {\n          return { CACHE: this.getSection('CACHE') };\n      }\n  };\n  // --- Test Suite Setup ---\n   // Redefine the service for testing, injecting mocks\n   // Need to re-run the IIFE with mocks"}