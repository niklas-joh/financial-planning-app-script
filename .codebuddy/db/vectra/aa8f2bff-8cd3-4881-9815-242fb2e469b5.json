{"chunk":30,"numChunks":32,"fileHash":"EGim/Ynj/8ex+ANaWj1uKBWsGdoONzQU8Kj/M33Ydzo=","filePath":"cline/clasp-pull/src/tests/monthly_spending_report.test.js","content":"/**\n(function() {\n  T.registerTest(\"MonthlySpendingReport\", \"generate should aggregate expenses correctly\", function() {\n      const testDate = new Date(2024, 4, 20); // May 2024\n      setupMockData(testDate);\n      global.Date = class extends Date { constructor() { super(testDate); } };\n      const reportSheet = TestMonthlySpendingReport.generate();\n      const reportData = mockSheetData[\"Monthly Report\"];\n      // Find rows for verification (this is brittle, depends on implementation details)\n      let foodGroceriesRow = -1, foodRestaurantsRow = -1, transportGasRow = -1, totalRow = -1;\n      for(let i=0; i<reportData.length; i++) {\n          if(reportData[i][0] === \"Food\" && reportData[i][1] === \"Groceries\") foodGroceriesRow = i;\n          if(reportData[i][0] === \"Food\" && reportData[i][1] === \"Restaurants\") foodRestaurantsRow = i;\n          if(reportData[i][0] === \"Transport\" && reportData[i][1] === \"Gas\") transportGasRow = i;\n          if(reportData[i][0] === \"TOTAL EXPENSES\") totalRow = i;\n      }\n      T.assertTrue(foodGroceriesRow > 0, \"Food/Groceries row should exist.\");\n      T.assertEquals(50, reportData[foodGroceriesRow][2], \"Food/Groceries amount should be 50.\");\n      T.assertTrue(foodRestaurantsRow > 0, \"Food/Restaurants row should exist.\");\n      T.assertEquals(60, reportData[foodRestaurantsRow][2], \"Food/Restaurants amount should be 60.\");"}