{"chunk":24,"numChunks":25,"fileHash":"NFeCXCcs54GgVRSaoZ7YUMS8I/hASRpntpW0s0paeLI=","filePath":"src/tests/cache-service.test.js","content":"/**\n(function() {\n  T.registerTest(\"CacheService\", \"invalidate should remove from both caches\", function() {\n      setupTestState();\n      const key = \"invalidate_key\";\n      const value = \"to be invalidated\";\n      const namespacedKey = `fp_${key}`;\n\n      // Populate caches\n      TestCacheService.put(key, value);\n      T.assertNotNull(TestCacheService._getMemoryCache()[namespacedKey], \"Memory cache should have key before invalidate.\");\n      T.assertNotNull(mockScriptCacheStore[namespacedKey], \"Script cache should have key before invalidate.\");\n\n      TestCacheService.invalidate(key);\n\n      T.assertTrue(TestCacheService._getMemoryCache()[namespacedKey] === undefined, \"Memory cache should be empty after invalidate.\");\n      T.assertTrue(mockScriptCacheStore[namespacedKey] === undefined, \"Script cache should be empty after invalidate.\");\n  });"}