{"chunk":9,"numChunks":10,"fileHash":"+Q+vXguz9tr2JmjJw0iW50US8OUoYEygXE3BXq/tTaM=","filePath":"src/services/cache-service.js","content":"/**\nconst CacheServiceModule = (function() {\n  CacheServiceModuleConstructor.prototype.put = function(key, value, expirySeconds) {\n    if (!this._isCacheEnabled()) return;\n\n    const effectiveExpirySeconds = expirySeconds === undefined ? this._getDefaultExpirySeconds() : expirySeconds;\n    const namespacedKey = this._generateNamespacedKey(key);\n\n    this.memoryCache[namespacedKey] = {\n      value: value,\n      expiry: Date.now() + (effectiveExpirySeconds * 1000),\n    };\n\n    try {\n      const scriptCache = CacheService.getScriptCache();\n      scriptCache.put(namespacedKey, JSON.stringify(value), effectiveExpirySeconds);\n    } catch (error) {\n      this.errorService.log(this.errorService.create(`Failed to put value in cache for key ${key}`, { originalError: error, severity: 'warning' }));\n    }\n  };\n  CacheServiceModuleConstructor.prototype.invalidate = function(key) {\n    if (!this._isCacheEnabled()) return;\n    const namespacedKey = this._generateNamespacedKey(key);\n\n    delete this.memoryCache[namespacedKey];\n\n    try {\n      const scriptCache = CacheService.getScriptCache();\n      scriptCache.remove(namespacedKey);\n    } catch (error) {\n      this.errorService.log(this.errorService.create(`Failed to invalidate cache for key ${key}`, { originalError: error, severity: 'warning' }));\n    }\n  };"}