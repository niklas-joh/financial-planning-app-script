{"chunk":8,"numChunks":12,"fileHash":"aZ9zuN1ddO09dA4aaZcQgsL67yVEiOBHXNLO6PzXnkg=","filePath":"cline/clasp-verify/src/utils/common.js","content":"/**\nFinancialPlanner.Utils = (function() {\n  return {\n    /**\n     * Formats a given cell range as currency using a specific Google Sheets number format string.\n     * Allows customization of the currency symbol and locale identifier used in the format.\n     * @param {GoogleAppsScript.Spreadsheet.Range} range - The cell range to format.\n     * @param {string} [currencySymbol='€'] - The currency symbol to display (e.g., '$', '£').\n     * @param {string} [locale='2'] - The locale identifier used in the format string (e.g., '1' for USD, '2' for EUR).\n     *                                Note: This is specific to the Google Sheets format string structure.\n     * @return {GoogleAppsScript.Spreadsheet.Range} The same range object, allowing for method chaining.\n     * @example\n     * const amountRange = sheet.getRange(\"C2:C10\");\n     * FinancialPlanner.Utils.formatAsCurrency(amountRange, '$', '1');\n     */\n    formatAsCurrency: function(range, currencySymbol = '€', locale = '2') {\n      // Using the specified Google Sheets format for currency\n      range.setNumberFormat(`_-[$${currencySymbol}-${locale}]\\\\ * #,##0_-;\\\\-[$${currencySymbol}-${locale}]\\\\ * #,##0_-;_-[$${currencySymbol}-${locale}]\\\\ * \"-\"??_-;_-@`);\n      return range; // Return for chaining\n    },"}