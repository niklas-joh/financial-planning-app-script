{"chunk":31,"numChunks":32,"fileHash":"EGim/Ynj/8ex+ANaWj1uKBWsGdoONzQU8Kj/M33Ydzo=","filePath":"cline/clasp-pull/src/tests/monthly_spending_report.test.js","content":"/**\n(function() {\n   T.registerTest(\"MonthlySpendingReport\", \"generate should calculate percentages correctly\", function() {\n      const testDate = new Date(2024, 4, 20); // May 2024\n      setupMockData(testDate);\n      global.Date = class extends Date { constructor() { super(testDate); } };\n\n      const reportSheet = TestMonthlySpendingReport.generate();\n      const reportData = mockSheetData[\"Monthly Report\"];\n      const totalExpenses = 150;\n\n      let foodGroceriesRow = -1, totalRow = -1;\n       for(let i=0; i<reportData.length; i++) {\n          if(reportData[i][0] === \"Food\" && reportData[i][1] === \"Groceries\") foodGroceriesRow = i;\n          if(reportData[i][0] === \"TOTAL EXPENSES\") totalRow = i;\n      }\n\n      T.assertTrue(foodGroceriesRow > 0, \"Food/Groceries row should exist.\");\n      T.assertEquals(50 / totalExpenses, reportData[foodGroceriesRow][3], \"Food/Groceries percentage should be correct.\");\n      T.assertTrue(totalRow > 0, \"Total Expenses row should exist.\");\n      T.assertEquals(1, reportData[totalRow][3], \"Total Expenses percentage should be 1 (100%).\");\n\n      global.Date = Date; // Restore original Date\n  });\n  // Note: Testing calculatePreviousMonthsAverage and trend requires more complex date mocking or\n  // focusing the test on verifying the *call* to calculatePreviousMonthsAverage rather than its result.\n  // For simplicity, we'll assume calculatePreviousMonthsAverage works if called."}